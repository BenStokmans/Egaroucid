/*
    Egaroucid Project

    @file move_ordering.hpp
        Move ordering for each search algorithm
    @date 2021-2023
    @author Takuto Yamana (a.k.a. Nyanyan)
    @license GPL-3.0 license
*/

#pragma once
#include <iostream>
#include <vector>
#include "common.hpp"
#include "board.hpp"
#include "search.hpp"
#include "midsearch.hpp"
#include "stability.hpp"
#include "level.hpp"
#if TUNE_MOVE_ORDERING_END
    #include "move_ordering_tune_end.hpp"
#endif

/*
    @brief if wipeout found, it must be searched first.
*/
#define W_WIPEOUT INF

/*
    @brief constants for move ordering
*/
#define MOVE_ORDERING_VALUE_OFFSET_ALPHA 10
#define MOVE_ORDERING_VALUE_OFFSET_BETA 10
#define MOVE_ORDERING_NWS_VALUE_OFFSET_ALPHA 10
#define MOVE_ORDERING_NWS_VALUE_OFFSET_BETA 3
#define MOVE_ORDERING_MPC_LEVEL MPC_95_LEVEL

#define W_END_MOBILITY 128
#define W_END_PARITY 4
//#define W_END_VALUE 4

#define N_CELL_TYPES 10
#define MAX_SAME_CELL_TYPE 8
#define MOVE_ORDERING_CELL_SCORE_MAX 256

// 5 -10 -20 -70 -25
// 4 -8 -16 -48 -157
// 7 -14 -28 -77 -218
#define W_CELL_WEIGHT 7
#define W_MOBILITY -14
#define W_POTENTIAL_MOBILITY -28
#define W_VALUE -77
#define W_VALUE_DEEP_ADDITIONAL -218

#define W_NWS_MOBILITY -14
#define W_NWS_POTENTIAL_MOBILITY -8
#define W_NWS_VALUE -16
#define W_NWS_VALUE_SHALLOW -14

/*
    @brief Flip structure with more information

    @param flip                 flip information
    @param value                the move ordering value
    @param n_legal              next legal moves as a bitboard for reusing
*/
struct Flip_value{
    Flip flip;
    int value;
    uint64_t n_legal;

    Flip_value(){
        n_legal = LEGAL_UNDEFINED;
    }

    bool operator<(const Flip_value &another) const{
        return value < another.value;
    }

    bool operator>(const Flip_value &another) const{
        return value > another.value;
    }
};

constexpr int move_ordering_end_disc_weights[62][N_CELL_TYPES * 2][MAX_SAME_CELL_TYPE] = {
    {
        { -63,   90,  159,  118,  581,    0,    0,    0}, {  21,   58,   63,   48,   70,  108,  230,  723}, { -40,   12,   24,   43,   68,   58,   85,  206}, {   2,   29,   26,   62,   75,   46,   57,  155}, {   0,   38,   46,   33,   -2,    0,    0,    0},  
        {-244, -149,  -77,   -6,   44,   84,   81,   36}, {-202, -101,  -15,   52,  112,  159,  197,  166}, {-105,  -15,   65,  136,  -11,    0,    0,    0}, {-328, -197, -102,  -12,   63,  126,  175,  248}, { -19,   57,   27,   27, -150,    0,    0,    0},  
        {  28,   29,  -30,  -29,  -19,    0,    0,    0}, {  28,   45,   74,   36,  -23,  -59,  -60,  -25}, { -18,   54,   77,   81,   69,   74,   96,  104}, { 124,   86,   62,   70,   -3,   31,   33,   66}, {  99,   23,  -20,  -16,  -16,    0,    0,    0},  
        { 163,   18,    8,    2,   12,   42,  101,  191}, { 283,   35,   -6,   10,   16,   57,   94,  175}, { 235,   -9,   19,   67,  163,    0,    0,    0}, { 147, -122,  -63,  -38,   -6,   53,  108,  171}, { 209,   50,   57,    0,   33,    0,    0,    0}   
    },
    {
        { -58,   70,  155,  137,  581,    0,    0,    0}, { -21,    4,   14,   11,   57,   73,  221,  688}, {  13,   30,   44,   52,   49,   50,   78,  210}, {   4,   39,   44,   74,   78,   41,   41,  132}, {   2,   22,   33,   23,   86,    0,    0,    0},  
        {-225, -133,  -58,   16,   67,  102,  105,  103}, {-221, -113,  -40,   32,   85,  130,  171,  196}, { -94,  -13,   66,  152,   22,    0,    0,    0}, {-306, -215,  -94,   -2,   75,  154,  211,  299}, {  76,   42,   32,   38, -208,    0,    0,    0},  
        {  36,   32,  -26,  -37,   20,    0,    0,    0}, {  -4,   47,   67,    4,  -48,  -85, -111,  -69}, {  -5,   61,   85,   65,   38,   41,   48,   58}, {  65,   88,   54,   67,   -2,   24,   40,   67}, { 102,   34,    7,    6,   55,    0,    0,    0},  
        { 199,   23,   10,   11,   33,   74,  135,  213}, { 319,  -41,  -53,  -40,  -38,    9,   61,  123}, { 198,    1,   46,   93,  192,    0,    0,    0}, {  48, -121,  -60,  -31,   14,   75,  145,  218}, { 236,   16,   19,  -15,  -89,    0,    0,    0}   
    },
    {
        { -29,   75,  162,  165,  551,    0,    0,    0}, {  43,   48,   50,   45,   58,   93,  209,  600}, {   8,   32,   47,   40,   44,   53,   86,  227}, {  20,   54,   57,   73,   78,   41,   28,  155}, {  15,   35,   43,   29,   34,    0,    0,    0},  
        {-198, -124,  -42,   19,   63,   91,  106,   70}, {-172, -103,  -16,   42,   93,  135,  163,  165}, {-114,  -20,   61,  142,   43,    0,    0,    0}, {-337, -218, -121,   -6,   70,  142,  215,  299}, {  72,   50,   35,   28, -204,    0,    0,    0},  
        {  40,    9,  -53,  -62,  -80,    0,    0,    0}, {  59,   52,   56,  -12,  -55,  -95, -135, -147}, { -47,   59,   69,   25,  -12,  -13,    0,  -10}, {  37,  102,   35,   48,   -1,   20,   30,   59}, {  83,   16,  -12,  -20,   33,    0,    0,    0},  
        { 167,    5,    0,    5,   26,   60,  115,  199}, { 292,  -35,  -58,  -38,  -32,    8,   47,  130}, { 173,   21,   62,  117,  232,    0,    0,    0}, {   4, -171, -121,  -66,  -29,   42,  126,  196}, { 239,   32,   25,  -16,  -78,    0,    0,    0}   
    },
    {
        { -64,   26,  114,  180,  651,    0,    0,    0}, {  16,   16,   19,    9,   35,   91,  158,  741}, {  -4,   18,   37,   32,   40,   64,  105,  216}, {  10,   27,   39,   58,   62,   47,   32,   17}, {   1,   19,   23,   16,   27,    0,    0,    0},  
        {-206, -115,  -41,   19,   64,   96,  105,   79}, {-170,  -85,   -1,   63,  104,  146,  163,  157}, {-104,  -16,   62,  123,   -4,    0,    0,    0}, {-400, -258, -132,  -29,   54,  121,  207,  290}, { -21,  -19,   13,   39, -218,    0,    0,    0},  
        {  49,   21,  -43,  -61,  -43,    0,    0,    0}, { 101,   52,   38,  -24,  -71, -118, -146,  -18}, { -38,   87,  111,   91,   73,   76,   80,   86}, { 101,  110,   58,   67,   21,   41,   54,   73}, { 104,   25,    4,   -2,   27,    0,    0,    0},  
        {  96,  -16,   -6,   -1,   26,   72,  124,  205}, { 321,  -54,  -72,  -61,  -43,  -12,   42,  117}, { 149,   -2,   35,   87,  197,    0,    0,    0}, { 106, -193, -127,  -69,  -16,   48,  128,  223}, { 265,   21,   47,   60,   26,    0,    0,    0}   
    },
    {
        {  -3,   70,  144,  203,  571,    0,    0,    0}, {  26,   25,   31,   23,   37,   98,   75,  582}, {   5,   20,   31,   28,   26,   30,   69,  175}, { -22,   -6,    9,   25,   28,   21,   14,   29}, {   1,   14,   10,    6,    4,    0,    0,    0},  
        {-206, -130,  -62,   -4,   37,   64,   69,   47}, {-131,  -53,   20,   80,  132,  160,  177,  179}, {-101,  -18,   54,  101,  -18,    0,    0,    0}, {-387, -279, -148,  -46,   46,  120,  194,  297}, { 154,    4,   37,   36, -258,    0,    0,    0},  
        {  58,   11,  -36,  -45,  -34,    0,    0,    0}, {  13,   53,   46,  -15,  -54,  -84, -120, -130}, { -44,   57,   54,   11,  -10,  -12,  -12,  -16}, {  20,   88,   31,   40,    7,   26,   41,   64}, {  84,   24,   -4,  -17,   25,    0,    0,    0},  
        {  42,  -34,  -42,  -28,    0,   37,   94,  174}, { 275,  -43,  -52,  -39,  -23,   16,   64,  141}, { 178,   28,   57,  107,  217,    0,    0,    0}, { -85, -209, -120,  -61,    0,   84,  169,  271}, { 299,   22,   14,   32, -150,    0,    0,    0}   
    },
    {
        { -19,   43,  110,  190,  531,    0,    0,    0}, {  47,   44,   43,   41,   48,   63,   99,  617}, { -10,    1,    8,    4,    6,   33,   59,  200}, {  39,   60,   65,   75,   74,   57,   56,   49}, {  21,   33,   31,   17,   15,    0,    0,    0},  
        {-202, -131,  -56,    1,   36,   63,   70,   58}, {-174, -103,  -25,   36,   82,  108,  128,  118}, {-146,  -58,   20,   73,  -11,    0,    0,    0}, {-363, -234, -138,  -36,   44,  104,  169,  211}, {  28,   32,   31,    8, -196,    0,    0,    0},  
        {  55,  -11,  -55,  -68,  -64,    0,    0,    0}, {  34,   65,   57,   11,  -26,  -67,  -87,  -74}, { -49,   75,   71,   42,   22,   20,   15,   14}, {  49,   94,   31,   32,   -3,   16,   24,   54}, {  72,   29,    4,   -5,   37,    0,    0,    0},  
        { 101,  -39,  -32,  -19,    9,   50,  105,  186}, { 247,  -65,  -76,  -64,  -48,   -9,   41,  119}, { 141,   37,   79,  142,  250,    0,    0,    0}, {  20, -166, -132,  -83,  -34,   38,  125,  195}, { 237,   47,   21,    2,  -20,    0,    0,    0}   
    },
    {
        { -17,   36,  101,  199,  430,    0,    0,    0}, {  22,   13,    6,    2,   22,   63,   82,  652}, {  18,   30,   33,   38,   34,   50,   84,  199}, { -11,    6,   12,   22,   25,    7,    1,   28}, {  17,   30,   29,   19,    7,    0,    0,    0},  
        {-164, -113,  -44,    0,   38,   63,   75,   47}, {-154,  -82,   -3,   54,  106,  127,  146,  129}, {-139,  -45,   21,   69,  -21,    0,    0,    0}, {-376, -256, -146,  -41,   43,  118,  175,  250}, { 145,   32,   20,   24, -218,    0,    0,    0},  
        {  77,   12,  -31,  -46,  -73,    0,    0,    0}, {  23,   45,   36,   -3,  -38,  -70, -105, -108}, { -94,   43,   19,    3,  -16,  -22,  -25,  -29}, {  33,   84,   37,   38,    8,   24,   32,   52}, {  71,   30,    6,   -4,   21,    0,    0,    0},  
        {  62,  -47,  -47,  -25,    2,   45,   96,  167}, { 199,  -85, -101,  -88,  -68,  -27,   21,   94}, { 127,   27,   63,  122,  231,    0,    0,    0}, {-103, -178, -114,  -68,   -5,   72,  162,  251}, { 302,   69,   71,   47,  -92,    0,    0,    0}   
    },
    {
        { -34,   21,   83,  189,  581,    0,    0,    0}, {  12,   -2,   -8,   -9,    8,   48,   40,  529}, {  10,    9,   18,   18,   16,   18,   28,  100}, {  30,   44,   49,   56,   53,   35,   25,   25}, {  24,   26,   22,   17,   -8,    0,    0,    0},  
        {-174, -116,  -51,   -2,   34,   60,   68,   43}, {-110,  -47,   27,   84,  121,  147,  165,  164}, {-117,  -35,   40,   83,   18,    0,    0,    0}, {-372, -266, -147,  -51,   36,  100,  163,  220}, {  62,  -13,   22,   18, -214,    0,    0,    0},  
        {  67,   -5,  -40,  -49,   -2,    0,    0,    0}, { -17,   27,   15,  -18,  -54,  -93, -143, -212}, { -17,   83,   70,   57,   42,   44,   36,   36}, {  73,   48,    8,    6,  -22,   -4,   -1,   28}, {  33,    0,  -21,  -42,  -13,    0,    0,    0},  
        { -14,  -79,  -70,  -43,  -13,   25,   73,  150}, { 186,  -73,  -76,  -61,  -44,   -9,   42,  115}, { 138,   70,  105,  174,  279,    0,    0,    0}, { -65, -194, -145,  -93,  -35,   48,  132,  226}, { 272,   50,   38,   60,  -36,    0,    0,    0}   
    },
    {
        { -56,   -3,   59,  169,  561,    0,    0,    0}, {  -6,  -13,  -25,  -29,  -11,   23,   47,  529}, {  35,   42,   49,   52,   51,   53,   43,   80}, {  36,   54,   58,   62,   66,   50,   44,   38}, {  30,   37,   28,   16,  -12,    0,    0,    0},  
        {-253, -182, -116,  -64,  -33,   -5,    8,  -14}, {-104,  -56,   18,   83,  123,  150,  162,  149}, {-112,  -31,   37,   78,   18,    0,    0,    0}, {-411, -278, -174,  -60,   27,   87,  155,  228}, {  36,   25,   79,   86, -243,    0,    0,    0},  
        {  60,  -38,  -68,  -77,  -67,    0,    0,    0}, {  13,   49,   42,   10,  -23,  -68,  -95, -149}, {   8,   37,   23,   14,    4,    4,    0,   10}, {  30,   25,   -4,    1,  -23,    1,    3,   31}, {  44,   16,   -3,  -18,   22,    0,    0,    0},  
        { -50,  -93,  -77,  -44,  -21,   24,   78,  154}, { 191,  -67,  -75,  -60,  -42,   -3,   52,  120}, { 130,   62,  102,  163,  276,    0,    0,    0}, { -15, -180, -116,  -56,   -5,   79,  179,  269}, { 344,   24,   26,   72,   45,    0,    0,    0}   
    },
    {
        { -24,   28,   90,  198,  531,    0,    0,    0}, {  36,   25,   23,   22,   29,   50,   68,  116}, { -25,  -23,  -15,  -18,  -17,  -22,  -19,    5}, { -25,   -8,    2,    8,    1,  -11,  -26,  -30}, {   9,    7,   -6,  -25,  -35,    0,    0,    0},  
        {-195, -134,  -67,  -26,   14,   36,   46,   42}, { -54,   -5,   71,  129,  169,  193,  207,  202}, { -44,   36,  105,  146,  107,    0,    0,    0}, {-393, -286, -165,  -83,   10,   91,  173,  234}, { 124,    2,   12,   22, -284,    0,    0,    0},  
        {  67,   -4,  -40,  -46,  -84,    0,    0,    0}, {  -8,   18,    5,  -23,  -53,  -96, -116, -150}, { -39,    6,   -4,   -8,  -25,  -25,  -27,  -27}, {  39,   40,    6,    9,  -13,    7,    6,   35}, {  38,    5,  -16,  -37,   10,    0,    0,    0},  
        { -96, -120, -105,  -76,  -45,   -5,   47,  124}, { 162,  -86,  -92,  -75,  -58,  -13,   36,  110}, { 117,   95,  138,  208,  315,    0,    0,    0}, { -85, -203, -132,  -58,   18,  105,  174,  272}, { 314,   19,   31,   30, -111,    0,    0,    0}   
    },
    {
        { -42,   14,   73,  186,  561,    0,    0,    0}, {  29,   15,    5,   11,   15,   46,   45,  132}, {   5,    5,   12,    7,   12,   16,   11,   21}, {  14,   22,   38,   39,   43,   31,   26,   15}, {  14,   22,   15,    1,  -28,    0,    0,    0},  
        {-261, -216, -142,  -92,  -55,  -24,  -19,  -29}, { -95,  -41,   24,   84,  128,  154,  175,  163}, { -60,   16,   77,  124,   84,    0,    0,    0}, {-373, -253, -134,  -43,   48,  128,  188,  223}, { 298,  -14,  -13,   85, -265,    0,    0,    0},  
        {  51,  -20,  -54,  -71,  -18,    0,    0,    0}, {  17,   26,   21,    1,  -30,  -63, -125, -220}, { -37,  -16,  -22,  -27,  -27,  -36,  -39,  -38}, {  28,   43,   15,   23,    1,   19,   16,   47}, {  60,   32,   14,   -3,   45,    0,    0,    0},  
        {-186, -169, -160, -121,  -85,  -33,   18,   96}, { 126,  -81,  -88,  -63,  -38,   10,   59,  128}, { 159,  117,  173,  236,  343,    0,    0,    0}, {-256, -191, -138,  -88,  -15,   73,  153,  261}, { 320,  -23,   75,   66, -258,    0,    0,    0}   
    },
    {
        { -65,  -17,   44,  159,  501,    0,    0,    0}, {  52,   43,   34,   33,   37,   43,   66,  121}, { -24,  -19,  -18,  -16,  -17,  -20,  -32,  -44}, { -84,  -67,  -60,  -56,  -51,  -66,  -72,  -96}, {  26,   27,   12,   -5,  -27,    0,    0,    0},  
        {-261, -211, -142,  -90,  -54,  -35,  -25,  -46}, { -76,  -33,   39,  100,  142,  166,  176,  145}, { -30,   53,  118,  158,  131,    0,    0,    0}, {-399, -251, -159,  -60,    3,   60,  110,  184}, { -49,   50,   65,   20, -169,    0,    0,    0},  
        {  80,   23,  -18,  -38,  -51,    0,    0,    0}, { -29,  -18,  -22,  -44,  -74, -118, -171, -197}, {  34,   12,    1,   -4,  -15,  -17,  -21,  -11}, {  10,    9,  -12,   -8,  -26,  -11,   -9,   19}, {  43,   16,   -8,  -23,   10,    0,    0,    0},  
        {-141, -128, -109,  -82,  -51,   -1,   59,  128}, { 101,  -74,  -96,  -81,  -56,  -12,   43,  115}, { 148,  133,  182,  258,  374,    0,    0,    0}, {  17, -182, -110,  -61,   -8,   56,  145,  216}, { 319,  133,   85,   93,  182,    0,    0,    0}   
    },
    {
        {-123,  -70,   -8,  108,  621,    0,    0,    0}, { -42,  -49,  -59,  -51,  -52,  -32,  -10,   16}, { -48,  -35,  -20,  -14,  -16,  -18,  -22,  -16}, { -11,    9,   18,   21,   29,    8,   -1,  -21}, { -38,  -42,  -54,  -72, -108,    0,    0,    0},  
        {-242, -200, -136,  -85,  -48,  -22,  -12,   -5}, { -72,  -27,   44,  100,  145,  170,  198,  171}, {  26,  101,  159,  194,  204,    0,    0,    0}, {-362, -267, -161,  -84,   -9,   53,  134,  220}, { 194,   33,    6,   44, -220,    0,    0,    0},  
        {  33,   -8,  -36,  -63,  -50,    0,    0,    0}, {  97,   95,   85,   61,   39,    2,  -70, -147}, { -63,  -49,  -51,  -57,  -62,  -55,  -56,  -41}, {  38,   44,   15,   11,   -2,   16,   24,   58}, {  65,   35,   16,   -3,   25,    0,    0,    0},  
        {-183, -202, -149, -120,  -77,  -29,   28,  108}, { 105,  -37,  -53,  -21,    4,   52,  108,  175}, { 203,  221,  267,  339,  450,    0,    0,    0}, {-216, -223, -144,  -67,   -4,   60,  128,  226}, { 256,   -4,   32,   -1, -176,    0,    0,    0}   
    },
    {
        { -43,   16,   77,  197,  631,    0,    0,    0}, {  29,   12,    7,    2,    1,    9,    9,   60}, { -59,  -49,  -44,  -33,  -28,  -46,  -46,  -67}, {   6,   27,   46,   45,   54,   41,   39,   10}, {  -7,   -8,  -24,  -39,  -78,    0,    0,    0},  
        {-313, -249, -190, -142, -107,  -83,  -64, -105}, {-124,  -90,  -22,   33,   81,  112,  116,   86}, {  17,  107,  182,  223,  191,    0,    0,    0}, {-388, -262, -146,  -69,   -2,   69,  117,  175}, { 241,   36,    3,   85, -161,    0,    0,    0},  
        { -18,  -59,  -98, -127, -144,    0,    0,    0}, {   2,    4,   -8,  -38,  -68, -109, -171, -300}, {  21,    1,  -14,  -24,  -34,  -21,  -12,   -3}, {  30,   30,    1,   12,   -1,   22,   27,   57}, { 103,   80,   61,   50,  103,    0,    0,    0},  
        {-215, -228, -200, -156, -119,  -69,   -6,   74}, {  92,    8,  -16,   -2,   30,   88,  132,  201}, { 192,  172,  228,  321,  443,    0,    0,    0}, {-255, -191, -140, -102,  -34,   33,  108,  192}, { 245,    0,   81,   41, -172,    0,    0,    0}   
    },
    {
        {  -5,   63,  122,  216,  651,    0,    0,    0}, { -29,  -47,  -48,  -49,  -56,  -43,  -23,  -42}, {  -8,   12,   22,   28,   29,   21,   18,   23}, {  30,   49,   59,   60,   63,   44,   41,   21}, {  -6,  -20,  -34,  -58,  -97,    0,    0,    0},  
        {-187, -146,  -78,  -26,    8,   29,   30,    0}, { -80,  -71,    2,   64,  102,  127,  135,  115}, {  -3,   65,  124,  168,  166,    0,    0,    0}, {-297, -215,  -89,  -32,   39,   93,  137,  154}, {  46,  -60,  -43,  -37, -281,    0,    0,    0},  
        {  -9,  -59, -103, -131, -124,    0,    0,    0}, {  43,   35,   30,   -1,  -28,  -60, -128, -167}, {  37,   34,   22,   20,   14,   16,   23,   37}, {  62,   62,   43,   38,   20,   47,   52,   77}, {  98,   74,   57,   36,   60,    0,    0,    0},  
        {-199, -238, -201, -168, -128,  -78,  -21,   55}, {  25,  -89, -100,  -90,  -57,  -14,   42,  114}, { 123,  141,  200,  275,  384,    0,    0,    0}, { -50, -153, -124,  -95,  -40,   30,   86,  195}, { 221,  -26,  -16,  -12, -126,    0,    0,    0}   
    },
    {
        {  14,   89,  147,  244,  661,    0,    0,    0}, {  42,   33,   25,   23,   30,   40,   65,  134}, { -22,  -11,    3,    5,   12,    6,   14,   -5}, {  12,   18,   41,   44,   45,   25,   19,  -15}, {  17,   12,   -5,  -45,  -14,    0,    0,    0},  
        {-207, -194, -127,  -77,  -36,  -17,  -10,  -26}, {-120,  -90,  -15,   35,   87,  112,  119,  132}, {  55,  104,  159,  208,  211,    0,    0,    0}, {-307, -255, -147,  -99,  -44,    3,   53,   83}, { 159,  -32,    3,   37,  -50,    0,    0,    0},  
        {  57,    6,  -28,  -61,  -78,    0,    0,    0}, { -13,  -14,  -30,  -59,  -91, -150, -204, -272}, { -47,  -40,  -42,  -42,  -57,  -49,  -36,  -10}, {  44,   48,   25,   20,    9,   36,   41,   77}, { 102,   78,   60,   40,  109,    0,    0,    0},  
        {-269, -255, -241, -202, -156, -100,  -42,   31}, {  -4,  -59,  -51,  -28,    1,   52,  109,  179}, { 195,  216,  276,  342,  446,    0,    0,    0}, {-340, -247, -235, -185, -136,  -86,  -39,   50}, {  49,  -36,   -3,   28, -168,    0,    0,    0}   
    },
    {
        { -76,   12,   78,  165,  531,    0,    0,    0}, {  67,   63,   53,   48,   51,   58,   68,  149}, {  54,   55,   70,   78,   76,   67,   56,   28}, {  11,   27,   32,   28,   37,   23,   13,  -21}, {  -6,  -13,  -33,  -63, -112,    0,    0,    0},  
        {-324, -279, -207, -154, -118, -100,  -86, -142}, {-169, -114,  -35,   17,   59,   87,  108,   98}, {  22,   90,  138,  179,  163,    0,    0,    0}, {-251, -194, -137,  -78,  -39,  -29,   29,   69}, { -48,  -31,   56,  -68, -246,    0,    0,    0},  
        {  48,  -11,  -66, -113,  -72,    0,    0,    0}, { -52,  -59,  -77, -103, -151, -189, -278, -316}, {  20,    6,    0,    3,    0,    9,   29,   49}, {  83,   89,   59,   68,   41,   57,   56,   97}, { 129,  110,   80,   65,  103,    0,    0,    0},  
        {-367, -317, -306, -256, -210, -149,  -83,   -8}, { -19,  -78,  -79,  -55,  -30,   25,   79,  161}, { 211,  217,  274,  351,  477,    0,    0,    0}, {  92,  -25,    5,   61,   62,  101,  142,  200}, { 208,   43,  -81,   -4,   10,    0,    0,    0}   
    },
    {
        {-148,  -61,   -5,   83,  514,    0,    0,    0}, {  43,   44,   32,   32,   32,   45,   44,   97}, { -41,  -43,  -15,  -15,  -10,  -14,  -23,  -41}, {   7,   16,   37,   41,   50,   43,   36,    0}, {   2,   -3,  -21,  -42, -127,    0,    0,    0},  
        {-271, -241, -169, -125,  -96,  -83,  -89, -120}, {-207, -181, -111,  -54,  -21,    4,   14,   19}, { -14,   58,  133,  165,  146,    0,    0,    0}, {-249, -209, -121,  -78,  -18,   10,   70,  153}, { 139,  -81,   24,  115, -176,    0,    0,    0},  
        {  99,   38,  -17,  -58, -138,    0,    0,    0}, { -56,  -58,  -72,  -95, -146, -199, -226, -299}, {   1,    6,    0,   -4,   -7,    8,   33,   55}, { 109,   98,   63,   77,   62,   86,   93,  140}, { 134,  107,   86,   78,  125,    0,    0,    0},  
        {-370, -342, -317, -276, -235, -188, -118,  -32}, { -40,  -62,  -62,  -41,  -14,   35,   90,  164}, { 196,  204,  264,  362,  469,    0,    0,    0}, { -51,  -62,   22,   72,  101,  160,  192,  269}, { 249,  -41,   48,  143,  -72,    0,    0,    0}   
    },
    {
        { -40,   48,  115,  201,  601,    0,    0,    0}, { -14,  -21,  -23,  -30,  -28,  -12,    1,   32}, {  45,   53,   61,   63,   70,   53,   45,   22}, {   2,    9,   46,   46,   54,   35,   34,  -19}, { -12,  -28,  -41,  -67, -132,    0,    0,    0},  
        {-239, -184, -120,  -77,  -41,  -29,  -25,  -60}, {-129,  -82,  -12,   39,   66,   87,   92,   74}, {  23,   72,  110,  117,   81,    0,    0,    0}, {-392, -317, -258, -193, -134,  -26,   17,   46}, { 195,   91,   10,  -43, -228,    0,    0,    0},  
        {   5,  -56, -125, -166, -123,    0,    0,    0}, {  65,   56,   41,   11,  -27,  -82, -124, -246}, { -20,   -8,  -24,  -32,  -35,  -16,    1,   34}, {  89,   87,   50,   55,   33,   59,   66,  108}, { 106,   85,   75,   48,   89,    0,    0,    0},  
        {-290, -277, -251, -206, -163, -112,  -47,   27}, {  74,   29,   15,   37,   66,   98,  155,  217}, { 254,  243,  270,  335,  431,    0,    0,    0}, {-320, -169, -156, -104,   -7,   44,  106,  135}, { 166,   -8,  -56, -146, -251,    0,    0,    0}   
    },
    {
        {  37,  136,  203,  265,  369,    0,    0,    0}, {   6,   11,    2,    1,    1,    2,   29,   90}, {  71,   88,  106,  111,  107,  103,   85,   72}, {   4,    6,   28,   31,   43,   22,   18,  -11}, { -23,  -34,  -46,  -80, -124,    0,    0,    0},  
        {-270, -218, -147, -103,  -69,  -68,  -84,  -96}, {-120,  -87,  -22,   26,   71,   97,  108,   87}, {  23,   81,  127,  162,  178,    0,    0,    0}, {-321, -263, -225, -168, -129,  -63,  -95,   -5}, {   4,  -33,   21,  -86, -136,    0,    0,    0},  
        { 102,   33,  -37,  -88,  -68,    0,    0,    0}, { -18,  -23,  -40,  -73, -120, -170, -224, -211}, { -90,  -85,  -94, -110, -107,  -91,  -52,  -22}, {  85,   82,   42,   52,   39,   64,   64,   88}, { 108,   99,   80,   69,   74,    0,    0,    0},  
        {-351, -343, -311, -289, -248, -183, -119,  -41}, {  38,  -39,  -44,  -21,   14,   64,  114,  175}, { 213,  253,  315,  392,  496,    0,    0,    0}, {-141,  -92,  -37,  -72,  -13,   19,   75,   96}, {  77,   38,  -68,  -17,  -56,    0,    0,    0}   
    },
    {
        {-137,  -24,   41,  104,  211,    0,    0,    0}, {  10,    5,    5,    6,   10,   25,   54,   93}, {  30,   52,   65,   68,   69,   63,   45,   20}, { -22,   -6,   15,   20,   28,   13,    8,  -32}, { -40,  -51,  -69,  -87,  -92,    0,    0,    0},  
        {-300, -242, -186, -142, -113, -116, -119, -169}, {-159,  -80,   -6,   50,   70,   85,   94,   60}, {  33,   81,  124,  138,  135,    0,    0,    0}, {-244, -261, -132,  -96,  -50,   -1,   91,   33}, { 101,  -24,  -24,   79, -191,    0,    0,    0},  
        { 115,   42,  -43,  -80, -154,    0,    0,    0}, {  86,   72,   64,   34,  -13,  -54, -103, -285}, {-112, -112, -133, -130, -129, -105,  -84,  -32}, {   7,    7,  -24,  -13,  -28,   -7,   -6,   40}, {  62,   53,   44,   32,  113,    0,    0,    0},  
        {-226, -206, -198, -165, -126,  -66,   -5,   75}, {  49,   34,   21,   41,   61,   95,  156,  244}, { 331,  350,  393,  468,  572,    0,    0,    0}, {-183, -106, -162,  -69,  -29,   11,   33,  146}, { 103, -165,  -56,  -61, -183,    0,    0,    0}   
    },
    {
        {-125,  -19,   50,   97,  147,    0,    0,    0}, { -76,  -77,  -74,  -76,  -70,  -57,  -55,   16}, {  97,  105,  115,  124,  125,  110,   93,   60}, {  10,   12,   48,   35,   50,   20,    8,  -25}, { -28,  -29,  -47,  -81, -183,    0,    0,    0},  
        {-223, -159,  -99,  -68,  -42,  -50,  -69,  -94}, {-209, -175, -114,  -69,  -31,  -21,  -25,  -42}, { -88,  -35,  -19,  -19,  -39,    0,    0,    0}, {-344, -259, -230, -199, -149, -135,  -76,  -63}, { -58,   -4,   72,   61, -253,    0,    0,    0},  
        { 183,  104,   20,  -35,   25,    0,    0,    0}, {  87,   73,   60,   36,  -13,  -57, -113, -188}, {  96,   76,   51,   53,   59,   72,  103,  124}, { 182,  181,  150,  146,  122,  144,  148,  187}, { 219,  197,  189,  185,  236,    0,    0,    0},  
        {-276, -294, -274, -252, -218, -158, -107,  -20}, {  19,  -19,  -23,  -20,   -2,   38,   89,  158}, { 181,  203,  228,  279,  383,    0,    0,    0}, { -41,  -57,  -45,   10,   14,   60,   79,   92}, { 128, -187, -197, -121,  -71,    0,    0,    0}   
    },
    {
        { -99,    8,   80,  112,  181,    0,    0,    0}, { -86,  -81,  -80,  -84,  -72,  -58,  -39,   22}, { 175,  186,  204,  212,  215,  195,  186,  134}, {  55,   65,   89,   91,   98,   74,   55,    9}, { -31,  -45,  -59,  -84, -102,    0,    0,    0},  
        {-164, -113,  -59,  -17,    5,    3,  -30,  -62}, { -96,  -41,   28,   60,   83,   90,   83,   69}, {   5,   57,   69,   81,   63,    0,    0,    0}, { -83,  -91,  -48,   24,   56,  107,  113,  124}, {  58,  152,  -11,  204,  -14,    0,    0,    0},  
        { 159,   77,  -11,  -76,  -87,    0,    0,    0}, {  14,    4,   -9,  -31,  -78, -130, -151, -138}, { -56,  -77, -101, -108, -101,  -87,  -39,   -7}, {   4,  -11,  -52,  -53,  -68,  -47,  -48,    2}, {  37,   24,   12,    1,   38,    0,    0,    0},  
        {-290, -264, -254, -226, -191, -138,  -74,   -5}, {  33,  -28,  -47,  -49,  -26,    2,   44,  120}, { 163,  175,  213,  264,  365,    0,    0,    0}, { -51, -137, -135, -126,  -87,  -62,    4,   26}, {   4, -217,    0, -165,  -64,    0,    0,    0}   
    },
    {
        {-119,    0,   65,  110,  172,    0,    0,    0}, { -44,  -32,  -33,  -32,  -19,   -4,    1,   73}, {  51,   54,   67,   69,   66,   47,   23,  -21}, { -23,    1,   18,   24,   35,    8,    4,  -29}, { -38,  -44,  -61,  -92, -131,    0,    0,    0},  
        { -97,  -57,    0,   29,   43,   36,   13,  -39}, {-153,  -92,  -29,    0,   23,   33,   39,   -1}, { -12,   37,   46,   66,   49,    0,    0,    0}, {-208,    5,   17,   29,   69,   75,   83,   57}, { 212,  -38,   47,  181, -197,    0,    0,    0},  
        { 121,   40,  -49, -102, -112,    0,    0,    0}, { 117,  111,  104,   74,   31,    2,  -56, -116}, {   7,    5,  -18,  -21,  -21,   -2,   21,   73}, {  97,   79,   58,   56,   35,   61,   65,   98}, { 107,   88,   74,   68,  116,    0,    0,    0},  
        {-366, -377, -381, -354, -324, -276, -219, -153}, { -65,  -64,  -92,  -82,  -66,  -37,    6,   83}, { 158,  169,  222,  265,  364,    0,    0,    0}, {-159,  -29,  -45,  -47,  -45,   -9,   -9,   -4}, { 154, -223,  -91,   -2, -253,    0,    0,    0}   
    },
    {
        {  26,  141,  208,  239,  297,    0,    0,    0}, {  97,  113,  112,  117,  127,  145,  158,  188}, { -14,   -4,   18,   22,   16,   -3,  -40,  -68}, { -61,  -53,  -21,  -33,  -30,  -59,  -69, -112}, {-132, -138, -157, -185, -166,    0,    0,    0},  
        {  40,   75,  129,  154,  165,  148,  121,   48}, { -44,   -5,   58,   83,  102,  112,   98,   61}, {  -2,   31,   61,   48,   15,    0,    0,    0}, {-115, -130, -131,  -80,  -44,  -49,  -31,  -64}, { -23,    2,  143,   14,  -22,    0,    0,    0},  
        {  62,  -37, -129, -183, -214,    0,    0,    0}, {  -5,   -9,  -25,  -57,  -99, -133, -181, -238}, { -50,  -49,  -79,  -85,  -83,  -56,  -32,   16}, {  68,   56,   15,   10,   -6,    5,   13,   39}, {  62,   48,   36,   39,   73,    0,    0,    0},  
        {-169, -204, -224, -211, -174, -134,  -81,  -16}, {  29,   -9,  -43,  -40,  -23,    4,   42,  105}, { 153,  150,  174,  235,  321,    0,    0,    0}, { -16,   -5,  -40,  -32,  -44,  -11,   28,   13}, { -24,  -54, -181,  -42,  -12,    0,    0,    0}   
    },
    {
        {-153,  -39,   32,   61,   70,    0,    0,    0}, {-112,  -95,  -86,  -82,  -71,  -57,  -42,   -6}, {  56,   71,   80,   84,   71,   53,   26,    7}, { -35,  -39,   -6,   -9,    4,  -16,  -48,  -78}, { -97, -112, -125, -143, -147,    0,    0,    0},  
        {-146, -106,  -59,  -30,  -25,  -48,  -80, -122}, {-185, -136,  -97,  -67,  -48,  -51,  -66,  -98}, {-107,  -65,  -50,  -71, -130,    0,    0,    0}, { -62,  -51,  -66,   -2,    6,  -28,  -13,   44}, { -63,   83,  -59,   36,    7,    0,    0,    0},  
        {  64,  -39, -138, -182, -186,    0,    0,    0}, { 225,  205,  192,  162,  129,   88,   50,  -19}, {  80,   55,   40,   37,   41,   66,  100,  138}, { 193,  179,  138,  128,  111,  129,  128,  176}, { 178,  166,  164,  146,  190,    0,    0,    0},  
        {-154, -182, -192, -181, -156, -121,  -63,   12}, {  63,   58,   19,   19,   24,   52,   93,  131}, { 178,  159,  171,  221,  309,    0,    0,    0}, {  54,  -73,  -30,  -16,  -59,  -60,  -11,  -33}, { -42,  -63,   34, -106,   37,    0,    0,    0}   
    },
    {
        {-131,   -9,   64,  100,  118,    0,    0,    0}, { -36,  -27,  -21,  -12,    0,   27,   64,   79}, {  25,   47,   71,   72,   72,   46,   17,  -37}, { -65,  -48,  -25,  -29,  -17,  -47,  -64, -104}, { -95, -106, -122, -146, -200,    0,    0,    0},  
        {-164, -115,  -64,  -38,  -37,  -58,  -89, -147}, {-122,  -81,  -39,  -28,  -24,  -34,  -57, -108}, {-148, -126, -110, -118, -156,    0,    0,    0}, {-173, -157, -114, -114,  -94,  -81,  -55,  -30}, {  88,  267,   19,  117,  171,    0,    0,    0},  
        { 100,    1,  -97, -143, -155,    0,    0,    0}, { -32,  -48,  -58,  -83, -121, -146, -194, -206}, {  51,   32,   14,   14,   11,   39,   73,  120}, { 140,  130,   90,   87,   71,   85,   90,  129}, { 149,  149,  138,  123,  190,    0,    0,    0},  
        {-160, -138, -156, -145, -112,  -75,  -23,   56}, { 110,   78,   39,   29,   29,   35,   59,  111}, { 138,  128,  164,  209,  281,    0,    0,    0}, {-104,  -18,   -8,    8,   16,   30,   17,   43}, {  42,  105,  198,  -46,  144,    0,    0,    0}   
    },
    {
        {   4,  123,  201,  228,  263,    0,    0,    0}, {-114, -103,  -96,  -87,  -69,  -47,   -7,   12}, { 170,  186,  211,  207,  200,  177,  143,   90}, {  43,   52,   83,   75,   93,   61,   50,   12}, { -27,  -32,  -43,  -59, -124,    0,    0,    0},  
        {-132,  -97,  -59,  -44,  -55,  -85, -120, -167}, {-175, -117,  -68,  -55,  -40,  -48,  -53,  -93}, { -97,  -51,  -45,  -76, -138,    0,    0,    0}, {  78,   23,   33,   24,   45,   58,   74,   38}, { -19,  -77,   75,  -76,  101,    0,    0,    0},  
        { 147,   36,  -63, -102, -133,    0,    0,    0}, {  43,   35,   19,   -7,  -39,  -71,  -93, -107}, { -75,  -88, -110, -115, -112,  -87,  -51,   -9}, { 108,   97,   54,   49,   27,   44,   49,   92}, { 109,  111,  108,  104,  125,    0,    0,    0},  
        {-193, -213, -229, -230, -215, -180, -135,  -67}, {   8,   -4,  -34,  -36,  -32,  -13,    9,   69}, { 123,  100,  101,  149,  248,    0,    0,    0}, {  85,   20,  -31,  -28,  -20,  -12,  -28,  -41}, {-132,   51,  -95,   61,    7,    0,    0,    0}   
    },
    {
        {-102,   17,   87,  120,  163,    0,    0,    0}, { -67,  -53,  -48,  -37,  -12,    7,   22,   21}, {  18,   34,   53,   60,   49,   26,   -4,  -56}, {-101,  -96,  -57,  -61,  -42,  -76,  -83, -140}, {-159, -161, -169, -184, -230,    0,    0,    0},  
        { 137,  159,  191,  196,  184,  151,  100,   33}, { -80,  -19,   41,   65,   74,   58,   38,  -10}, { -94,  -76,  -92,  -99, -148,    0,    0,    0}, { 139,  153,  127,  109,  112,   90,  101,   85}, {  -6, -117, -105,   93,  -89,    0,    0,    0},  
        { 228,  120,   25,  -29,   -3,    0,    0,    0}, {  92,   70,   55,   39,    7,  -28,  -53,  -50}, { -49,  -65,  -89,  -95,  -87,  -68,  -32,    8}, {  34,   18,  -23,  -30,  -46,  -25,  -21,   29}, {  52,   47,   52,   47,  100,    0,    0,    0},  
        {   7,  -61, -100, -111, -100,  -67,  -20,   28}, {  70,   -3,  -35,  -46,  -50,  -36,    3,   72}, { 156,  143,  167,  183,  256,    0,    0,    0}, { 186,   78,   45,   45,   19,   15,  -19,  -55}, { -73, -257,  -56,  -38, -152,    0,    0,    0}   
    },
    {
        {-189,  -71,   10,   40,   35,    0,    0,    0}, {  85,   94,  100,  111,  138,  160,  182,  224}, { -28,   -6,   14,    8,   -1,  -37,  -68, -119}, { -79,  -76,  -38,  -42,  -24,  -53,  -68, -117}, { -94,  -92, -104, -116, -149,    0,    0,    0},  
        { 131,  164,  192,  196,  180,  148,  105,   44}, { -17,   10,   49,   65,   65,   41,   19,  -45}, {-119, -113, -123, -144, -178,    0,    0,    0}, { -45,  -35,  -22,  -16,    1,   12,    5,  -24}, {  20,  -65,   16,   -5,  -65,    0,    0,    0},  
        { 191,   77,  -17,  -47,  -50,    0,    0,    0}, {  42,   21,    6,  -15,  -43,  -73,  -95, -135}, {-102, -116, -138, -150, -145, -129,  -93,  -71}, {  47,   37,    3,   -8,  -23,   -5,    0,   44}, {  50,   44,   40,   39,   65,    0,    0,    0},  
        { -36,  -66,  -88, -102,  -86,  -58,  -20,   40}, { 108,   40,   -2,  -18,  -33,  -27,    1,   48}, {  84,   95,  110,  135,  187,    0,    0,    0}, { 105,  114,   62,   47,   53,   62,   55,   57}, {  50,   -4,  -23,   64,  -14,    0,    0,    0}   
    },
    {
        {-135,  -16,   65,   99,  106,    0,    0,    0}, {  62,   77,   85,   97,  110,  141,  171,  225}, { -87,  -80,  -60,  -62,  -69, -100, -138, -192}, {-155, -142, -111, -114,  -97, -126, -136, -174}, {-192, -195, -204, -218, -236,    0,    0,    0},  
        { 114,  149,  183,  186,  165,  128,   72,    1}, {  -2,   41,   78,   88,   78,   63,   41,  -12}, { -50,  -61,  -83, -108, -182,    0,    0,    0}, {-119,  -59,  -12,  -12,   -6,  -31,  -53,  -99}, {-339,  -78, -153, -134, -210,    0,    0,    0},  
        {  91,  -28, -111, -153, -185,    0,    0,    0}, { 129,  106,   92,   64,   48,   23,    9,    1}, {  28,   15,   -5,  -16,  -13,   12,   35,   72}, { 126,  113,   78,   73,   55,   76,   75,  116}, { 142,  145,  140,  137,  160,    0,    0,    0},  
        { -31,  -47,  -96, -118, -111,  -81,  -40,   34}, { 118,   82,   46,   33,   19,   20,   43,   88}, { 140,  104,  123,  133,  176,    0,    0,    0}, { 367,  135,   64,   30,    7,    2,  -13,   21}, {  63,   -9,    7,  -64,  196,    0,    0,    0}   
    },
    {
        {-139,  -29,   54,   88,   47,    0,    0,    0}, {  19,   34,   41,   60,   78,  101,  134,  176}, {  89,   95,  113,  114,   96,   67,   29,  -22}, { -28,  -29,    8,    1,   16,  -21,  -37,  -84}, {-124, -121, -126, -136, -160,    0,    0,    0},  
        {  61,   93,  109,  105,   76,   41,  -21,  -95}, {-163, -112,  -90,  -81,  -77,  -99, -135, -192}, {-226, -217, -229, -259, -357,    0,    0,    0}, { -12,  -64,  -66, -100, -105,  -79, -113, -143}, {-100, -124,  -14, -145,    7,    0,    0,    0},  
        { 104,  -13, -102, -144, -165,    0,    0,    0}, { -34,  -44,  -60,  -78,  -99, -127, -131, -201}, { 128,  105,   77,   62,   66,   86,  113,  151}, { 178,  150,  115,   95,   77,   93,  105,  125}, { 129,  126,  129,  135,  144,    0,    0,    0},  
        {  73,   30,  -17,  -43,  -42,  -23,   14,   66}, { 119,   66,   16,   -6,  -17,   -2,    9,   52}, { 112,   56,   64,   83,  145,    0,    0,    0}, { 155,  179,  151,  100,  120,  103,   63,   48}, { -43,  115,  -21,   94,   73,    0,    0,    0}   
    },
    {
        {   4,  111,  193,  227,  224,    0,    0,    0}, {-100,  -90,  -88,  -64,  -48,  -15,    5,   52}, { 158,  166,  188,  178,  167,  137,   97,   34}, { -88,  -98,  -54,  -62,  -51,  -94, -110, -155}, {-180, -181, -180, -187, -204,    0,    0,    0},  
        { -53,  -20,  -11,  -22,  -56, -101, -155, -206}, {-121,  -84,  -57,  -51,  -63,  -90, -128, -179}, {-212, -235, -226, -280, -333,    0,    0,    0}, {-130, -109,  -59,  -89,  -86, -111, -150, -171}, {   0,   72,   96, -147, -115,    0,    0,    0},  
        { 106,  -14, -107, -149, -176,    0,    0,    0}, {  73,   42,   30,   19,   -3,  -16,  -60,  -70}, {  60,   31,    0,  -15,  -23,    3,   27,   76}, { 114,   97,   54,   34,   21,   36,   32,   72}, {  59,   57,   57,   63,  104,    0,    0,    0},  
        {  81,   68,   36,    8,    7,   18,   48,  100}, { 144,  118,   69,   46,   29,   21,   41,   77}, { 118,  113,   97,  145,  164,    0,    0,    0}, { 151,  273,  243,  191,  163,  155,  114,  146}, { 146,  180,  -65,  -37,   35,    0,    0,    0}   
    },
    {
        { 107,  210,  295,  332,  331,    0,    0,    0}, {   1,    3,   12,   23,   53,   90,  117,  211}, {  94,  105,  123,  116,  103,   71,   17,  -18}, { -65,  -62,  -31,  -38,  -24,  -62,  -89, -159}, {-147, -142, -147, -149, -186,    0,    0,    0},  
        {  97,  110,  124,   94,   63,   10,  -43, -124}, { -84,  -30,   -7,    0,  -20,  -47,  -96, -156}, {-174, -181, -190, -218, -332,    0,    0,    0}, {  -7,  -10,   31,   19,   -4,    6,    8,  -55}, { -12,   64,  -91, -114, -292,    0,    0,    0},  
        { 119,   -3,  -92, -127, -153,    0,    0,    0}, { -68,  -85, -106, -124, -141, -168, -181, -213}, { 122,   98,   61,   43,   38,   55,   74,  100}, { 164,  137,   98,   85,   68,   87,   89,  119}, { 142,  138,  136,  147,  155,    0,    0,    0},  
        { 130,  108,   42,    9,    0,   17,   28,   92}, { 119,  105,   51,    8,  -17,  -15,  -11,   20}, {  85,   24,   28,   63,   91,    0,    0,    0}, {  67,  115,   29,   23,   26,    5,  -26,   -3}, {   3, -175, -205, -357, -273,    0,    0,    0}   
    },
    {
        {  11,  113,  200,  239,  243,    0,    0,    0}, {  28,   37,   46,   60,   88,  131,  159,  181}, {  71,   83,   95,   91,   74,   37,   -7,  -67}, { -47,  -49,  -12,  -18,   -5,  -26,  -50, -121}, {-131, -130, -129, -147, -147,    0,    0,    0},  
        {  60,   89,   92,   77,   37,  -21,  -82, -146}, {-179, -128, -110, -106, -121, -156, -192, -253}, {-273, -283, -303, -352, -415,    0,    0,    0}, { 103,  122,  182,  163,  123,   82,   46,   -3}, { -89,  165,  147,   27,  101,    0,    0,    0},  
        { 139,   13,  -66, -107, -125,    0,    0,    0}, {  -7,  -30,  -45,  -58,  -76,  -97, -106, -148}, {  -5,  -32,  -58,  -70,  -80,  -68,  -47,  -13}, {  12,   -6,  -51,  -55,  -75,  -48,  -64,  -29}, { -10,  -19,  -16,    1,   22,    0,    0,    0},  
        { 171,   88,   36,    1,  -21,  -16,   20,   48}, { 113,  113,   64,   36,    9,    2,   16,   50}, { 101,   93,   77,   97,  128,    0,    0,    0}, { 309,  216,  148,   98,   49,    6,  -29,   16}, {  17,   88,  -35,  -45,  208,    0,    0,    0}   
    },
    {
        { 140,  240,  324,  354,  329,    0,    0,    0}, {  36,   42,   49,   75,  106,  149,  173,  218}, {-134, -120, -109, -115, -125, -164, -202, -255}, {-202, -197, -159, -163, -152, -186, -208, -255}, {-283, -276, -282, -276, -314,    0,    0,    0},  
        {  74,  100,   88,   64,   25,  -32,  -90, -156}, { -74,  -21,    1,   -4,  -19,  -48, -104, -179}, {-210, -238, -294, -347, -467,    0,    0,    0}, { 186,   95,   50,   78,   91,   33,   21,  -21}, {  94,  255,   96,    1,  351,    0,    0,    0},  
        { 256,  137,   59,   18,  -12,    0,    0,    0}, { 197,  174,  163,  150,  125,  115,   96,   82}, {  55,   24,    2,   -8,  -10,    5,   20,   55}, {  25,  -13,  -45,  -55,  -68,  -51,  -49,  -13}, {   6,   10,   12,   16,   39,    0,    0,    0},  
        { 119,   87,   41,    6,  -19,   -7,    8,   57}, { 120,   96,   38,  -10,  -31,  -39,  -39,   -2}, {  53,   -2,  -28,  -51,  -33,    0,    0,    0}, {  30,  113,   61,   42,  -20,  -16,   -7,  -55}, {-170,  176,   84,  -74,   90,    0,    0,    0}   
    },
    {
        {-162,  -72,   22,   56,   78,    0,    0,    0}, { -26,  -15,   -6,   15,   50,   82,  134,  170}, { 129,  131,  145,  140,  127,   89,   33,  -25}, { -49,  -51,  -19,  -24,  -12,  -55,  -63, -123}, {-154, -144, -141, -149, -181,    0,    0,    0},  
        { 131,  147,  139,  109,   59,    2,  -75, -149}, {-153,  -96,  -59,  -62,  -73, -117, -151, -227}, {-177, -171, -189, -244, -361,    0,    0,    0}, {   8,  -57,  -28,  -55,  -46,  -94, -159, -168}, {-158, -148,  -24,  126,  -83,    0,    0,    0},  
        { 145,   29,  -48,  -90, -147,    0,    0,    0}, {  62,   46,   34,   19,    7,    8,   -1,  -24}, { 158,  134,   99,   82,   78,   89,  107,  121}, { 145,  112,   80,   69,   50,   69,   68,  100}, { 107,  105,  110,  123,  162,    0,    0,    0},  
        {  78,   54,  -11,  -56,  -80,  -81,  -60,  -24}, {  40,   52,  -13,  -35,  -66,  -71,  -58,   -5}, {  40,  -21,  -44,  -36,   14,    0,    0,    0}, { 341,  270,  247,  175,  118,  123,   92,  122}, {  28, -179,  -29,  100,  102,    0,    0,    0}   
    },
    {
        { -22,   71,  156,  180,  201,    0,    0,    0}, { -70,  -65,  -53,  -29,    7,   50,  116,   87}, { 126,  121,  129,  120,  107,   74,   23,   -5}, { -72,  -56,  -20,  -33,  -28,  -64,  -81, -142}, {-160, -154, -149, -156, -205,    0,    0,    0},  
        { 357,  337,  321,  287,  238,  179,  100,   21}, {  86,  118,  141,  124,  100,   56,   14,  -57}, {-127, -151, -198, -264, -359,    0,    0,    0}, { 177,  211,  141,  103,   68,   -3,  -61, -108}, {-187,  117,  -60,  -49,  348,    0,    0,    0},  
        { 189,   68,   -8,  -48, -103,    0,    0,    0}, {  42,   32,   18,    8,   -9,  -27,  -38,  -82}, { -26,  -54,  -80,  -96,  -97,  -86,  -82,  -33}, { -44,  -73, -110, -120, -144, -126, -123,  -91}, { -57,  -55,  -47,  -45,    7,    0,    0,    0},  
        { 264,  198,  132,   76,   47,   35,   44,   77}, {  91,   12,  -50,  -85, -114, -131, -131,  -97}, { -67,  -94, -125, -139, -128,    0,    0,    0}, { 224,  103,   59,   -7,  -86, -122, -172, -248}, {-232,  166,  176,    3,  309,    0,    0,    0}   
    },
    {
        {-153,  -65,   17,   35,   18,    0,    0,    0}, {  50,   56,   67,   98,  129,  170,  204,  293}, { 136,  143,  154,  146,  132,   89,   46,  -45}, { -46,  -56,  -20,  -26,   -8,  -52,  -53, -123}, {-136, -124, -112, -118, -197,    0,    0,    0},  
        { 111,   65,   65,   11,  -36,  -92, -162, -219}, {-111,  -82,  -83,  -94, -128, -171, -228, -306}, {-302, -295, -349, -385, -508,    0,    0,    0}, { 160,   88,   36,   14,   10,  -22,  -79, -144}, {-153, -124, -175,  -43,  111,    0,    0,    0},  
        {  94,  -25,  -99, -134, -203,    0,    0,    0}, { 132,  116,  110,  100,   94,   76,   69,   35}, {  79,   47,   11,   -6,   -6,   10,   16,   33}, {  67,   47,   12,   -3,  -19,  -10,    6,   42}, {  55,   53,   59,   72,   91,    0,    0,    0},  
        { 308,  305,  244,  192,  160,  148,  139,  181}, { 218,  188,  124,   74,   38,   20,   11,   25}, {  45,  -29,  -26,  -49,   -1,    0,    0,    0}, { 296,  233,  137,   77,   35,   27,   -1,  -67}, {-162,   -8,  122,   74,   98,    0,    0,    0}   
    },
    {
        {-138,  -48,   31,   74,    7,    0,    0,    0}, { 148,  153,  163,  191,  226,  273,  318,  373}, { 209,  210,  224,  220,  203,  169,  129,   85}, { -15,  -15,   11,    2,   20,  -21,  -29,  -96}, {-141, -120, -115, -116, -186,    0,    0,    0},  
        { 205,  169,  161,  116,   56,  -21,  -94, -191}, { -88,  -37,  -27,  -42,  -68, -109, -161, -266}, {-245, -247, -312, -378, -505,    0,    0,    0}, { 117,   80,   84,   49,   38,  -18,  -41, -114}, {-312,  117,   14, -237,  111,    0,    0,    0},  
        { 221,  109,   42,    2,  -47,    0,    0,    0}, {  80,   73,   64,   54,   41,   34,   18,    0}, { -61,  -80, -108, -121, -124, -115, -106,  -74}, { -34,  -67,  -97, -123, -133, -127, -124,  -97}, { -91,  -89,  -82,  -68,  -35,    0,    0,    0},  
        { 324,  276,  198,  139,   96,   72,   78,  125}, { 145,  121,   49,   -5,  -34,  -47,  -55,  -33}, {  13,  -64, -101, -131,  -99,    0,    0,    0}, { 425,  178,  103,   74,    5,  -14,  -54,  -53}, { -94,  258,    2, -103,  330,    0,    0,    0}   
    },
    {
        {-129,  -45,   18,   51,    1,    0,    0,    0}, {  48,   61,   70,   97,  151,  191,  227,  239}, {  47,   59,   76,   64,   53,   19,  -32,  -68}, { -61,  -59,  -17,  -32,  -24,  -62,  -77, -131}, {-149, -131, -111, -106, -143,    0,    0,    0},  
        { 370,  373,  331,  286,  227,  148,   65,  -48}, { -50,    0,   17,   -5,  -40,  -88, -152, -228}, {-202, -247, -310, -367, -481,    0,    0,    0}, { 201,  149,  147,   96,   50,    3,  -58, -138}, { -92,   75,  -47,   30,  220,    0,    0,    0},  
        {  87,  -27,  -98, -157, -235,    0,    0,    0}, { 174,  165,  159,  150,  148,  136,  109,   93}, { -35,  -48,  -75,  -97,  -99,  -89,  -77,  -60}, { -26,  -43,  -75,  -92, -103,  -96,  -95,  -63}, { -32,  -32,  -20,   -9,   -4,    0,    0,    0},  
        { 335,  310,  226,  154,  108,   86,   88,  110}, { 148,  132,   63,    3,  -38,  -61,  -75,  -54}, {  14,  -42,  -75, -105, -119,    0,    0,    0}, { 152,  185,   84,   17,  -35,  -88, -143, -159}, {-215,  -21,   51,  -70,   94,    0,    0,    0}   
    },
    {
        {-169,  -92,  -29,   15,  -18,    0,    0,    0}, { -74,  -75,  -62,  -32,   -6,   63,  105,  134}, { 260,  255,  275,  263,  256,  211,  182,  135}, {  47,   33,   64,   51,   63,   24,   11,  -37}, {-104,  -88,  -74,  -72, -108,    0,    0,    0},  
        { 214,  188,  158,  112,   54,  -16,  -95, -184}, { -83,  -46,  -39,  -68,  -98, -148, -203, -287}, {-275, -289, -352, -453, -588,    0,    0,    0}, {  22,  163,  116,   97,   81,   18,  -20,  -84}, {-221,   22,  106,   11, -170,    0,    0,    0},  
        { 110,    0,  -69, -129, -249,    0,    0,    0}, {-134, -144, -150, -156, -163, -164, -176, -229}, { 127,   90,   68,   48,   43,   48,   57,   81}, { 127,   95,   68,   47,   32,   48,   39,   51}, {  72,   71,   78,   91,  124,    0,    0,    0},  
        { 342,  314,  226,  165,  120,   87,   90,  114}, { 120,  134,   63,   13,  -27,  -47,  -66,  -48}, { -24, -105, -177, -207, -192,    0,    0,    0}, { 494,  275,  196,  154,   94,   75,   43,  -19}, { 122,  -70, -173,  -84,  168,    0,    0,    0}   
    },
    {
        { -37,   33,   97,  136,   89,    0,    0,    0}, {  55,   57,   71,  100,  145,  198,  246,  302}, { 255,  254,  258,  255,  238,  202,  162,  120}, {  -1,    8,   33,   16,   30,   -8,  -15,  -90}, {-104,  -82,  -65,  -72, -136,    0,    0,    0},  
        { 298,  285,  240,  188,  135,   76,  -11, -127}, { -65,  -63,  -74, -106, -131, -204, -260, -351}, {-317, -345, -397, -483, -612,    0,    0,    0}, { -42,   -5,  -35,  -67, -127, -185, -241, -306}, {-242,  -56,  -80, -118,  -75,    0,    0,    0},  
        {  95,   -9,  -90, -146, -210,    0,    0,    0}, {  55,   50,   50,   47,   38,   46,   40,  -23}, { 142,  128,  100,   87,   73,   74,   76,  100}, {  95,   59,   23,    9,   -5,    6,   15,   34}, {  71,   65,   69,   91,  124,    0,    0,    0},  
        { 295,  244,  164,  109,   62,   37,   31,   51}, { 129,  128,   47,   -8,  -65,  -88, -116, -110}, {-106, -184, -239, -261, -264,    0,    0,    0}, { 293,  292,  213,  144,   83,   19,  -23,  -55}, { -23,   22,  -27,  -43,  146,    0,    0,    0}   
    },
    {
        {-102,  -41,   18,   54,   24,    0,    0,    0}, {  16,   16,   31,   62,  104,  162,  228,  295}, {  83,   87,   95,   91,   80,   53,   12,  -16}, { -41,  -36,  -20,  -27,   -4,  -39,  -50, -112}, {-122,  -97,  -82,  -66, -143,    0,    0,    0},  
        { 319,  283,  232,  184,  127,   58,  -16, -107}, {  48,   68,   63,   31,    7,  -46, -103, -183}, {-159, -203, -253, -344, -489,    0,    0,    0}, { 196,  136,   68,  -14,  -67,  -71, -125, -221}, {-130,  -15,  -68,   81,  183,    0,    0,    0},  
        {  91,   -4,  -68, -137, -241,    0,    0,    0}, { -27,  -24,  -26,  -27,  -28,  -29,  -44,  -59}, {  57,   33,   12,    4,   -3,    3,    9,   25}, {  58,   33,    5,   -1,  -18,   -6,   -5,   16}, {  11,   17,   22,   34,   82,    0,    0,    0},  
        { 334,  340,  241,  183,  129,   97,   80,   88}, { 110,   97,   38,  -21,  -69,  -86,  -97, -100}, { -89, -179, -241, -267, -287,    0,    0,    0}, { 271,  280,  184,  125,  108,   58,  -33, -105}, {-170,  -84,   64,   16,  132,    0,    0,    0}   
    },
    {
        {  14,   78,  130,  170,   72,    0,    0,    0}, {-100,  -95,  -82,  -56,   -2,   52,  106,  123}, {  35,   41,   52,   46,   34,   15,  -18,  -48}, { -86,  -79,  -48,  -59,  -44,  -73,  -84, -148}, {-142, -115,  -98,  -89, -157,    0,    0,    0},  
        { 195,  179,  140,   96,   38,  -26, -104, -208}, { -58,  -55,  -37,  -66,  -99, -163, -219, -322}, {-269, -286, -340, -419, -571,    0,    0,    0}, { 235,  184,  118,   88,   34,  -53, -107, -206}, {-186,  145,   58,   78,  147,    0,    0,    0},  
        { 127,   35,  -29, -114, -186,    0,    0,    0}, { -43,  -32,  -32,  -30,  -29,  -39,  -23,  -40}, { 102,   70,   54,   39,   35,   47,   55,   65}, {  53,   37,   24,    7,   -3,    5,    4,   32}, {  40,   39,   47,   62,  153,    0,    0,    0},  
        { 369,  332,  241,  182,  125,   97,   85,   79}, { 135,  116,   32,  -28,  -78, -109, -126,  -93}, { -86, -181, -242, -273, -264,    0,    0,    0}, { 498,  446,  329,  265,  179,  125,   93,   15}, { -45,   17,   25,  -56,  281,    0,    0,    0}   
    },
    {
        {  33,   84,  136,  163,  160,    0,    0,    0}, {  88,   82,  103,  137,  188,  255,  336,  332}, {  24,   26,   41,   28,   28,   11,  -29,  -62}, { -57,  -52,  -24,  -28,  -12,  -40,  -47, -103}, {-114,  -82,  -64,  -61, -133,    0,    0,    0},  
        { 282,  259,  224,  168,  110,   44,  -39, -137}, {  37,   49,   51,   19,  -20,  -78, -151, -227}, {-205, -225, -297, -391, -533,    0,    0,    0}, { 102,  147,  111,   49,  -30,  -96, -183, -260}, {-374,  -63,   52, -177,  -41,    0,    0,    0},  
        { 118,   39,  -33, -132, -298,    0,    0,    0}, { -54,  -49,  -42,  -39,  -42,  -44,  -51,  -27}, {  11,   -4,  -11,  -29,  -37,  -28,  -26,    3}, {   7,  -27,  -39,  -48,  -56,  -41,  -37,  -19}, {  13,   10,   20,   42,   79,    0,    0,    0},  
        { 398,  345,  252,  194,  141,  105,   90,   92}, { 154,  105,   27,  -42,  -96, -128, -147, -145}, {-125, -219, -294, -343, -332,    0,    0,    0}, { 542,  393,  313,  209,  140,   66,   -5,  -52}, {  -2,  133, -103,    7,  314,    0,    0,    0}   
    },
    {
        { -42,   12,   60,   88,    5,    0,    0,    0}, { 111,  120,  137,  165,  212,  276,  341,  450}, { 150,  153,  165,  158,  168,  140,  117,   99}, {   9,   -3,   32,   22,   32,  -10,  -13,  -74}, { -83,  -46,  -34,  -20,  -74,    0,    0,    0},  
        { 270,  256,  212,  158,  102,   30,  -52, -125}, { -30,    9,   -1,  -22,  -64, -119, -174, -256}, {-220, -243, -293, -366, -514,    0,    0,    0}, { 295,  194,  136,   60,    2,  -71, -158, -259}, {-210,  104, -102,  101,  290,    0,    0,    0},  
        {   2,  -74, -150, -252, -503,    0,    0,    0}, { -59,  -62,  -57,  -59,  -53,  -54,  -49,  -85}, {  59,   38,   19,    3,    6,   11,   20,   21}, {  61,   21,    6,   -8,  -20,   -6,   -5,   22}, {  22,   18,   27,   42,   35,    0,    0,    0},  
        { 388,  317,  230,  159,  103,   72,   47,   74}, { 106,  110,   44,  -24,  -78, -113, -131, -113}, { -99, -199, -250, -284, -294,    0,    0,    0}, { 320,  257,  152,   64,  -15,  -76, -155, -230}, {-317, -133,   60, -144,  167,    0,    0,    0}   
    },
    {
        { -41,   10,   50,   79,   77,    0,    0,    0}, {   8,   14,   29,   65,  105,  168,  249,  271}, {  68,   53,   61,   57,   59,   47,   20,    4}, { -19,  -14,   15,    2,   22,  -10,  -20,  -75}, { -86,  -56,  -32,  -21,  -58,    0,    0,    0},  
        { 273,  247,  199,  146,   94,   28,  -34, -124}, {  -7,   28,   17,   -2,  -47, -108, -163, -259}, {-198, -202, -264, -359, -478,    0,    0,    0}, { 271,  146,   35,   -6,  -43, -121, -184, -273}, {-285,  -60,   68, -109,  340,    0,    0,    0},  
        {  25,  -49, -124, -229, -499,    0,    0,    0}, { -40,  -23,  -24,  -20,  -21,  -27,  -18, -102}, {  67,   47,   32,   35,   30,   28,   25,   23}, {  33,    1,  -20,  -30,  -34,  -19,   -8,   18}, {  19,   14,   30,   45,   88,    0,    0,    0},  
        { 427,  422,  337,  271,  215,  178,  160,  149}, { 194,  164,   76,   18,  -46,  -91, -103, -113}, { -83, -164, -247, -289, -286,    0,    0,    0}, { 337,  226,  127,   45,  -29,  -65, -118, -230}, {-338,  107,  -75,   52,  281,    0,    0,    0}   
    },
    {
        { -92,  -39,    0,   15,  -17,    0,    0,    0}, {  74,   77,   88,  125,  167,  244,  326,  517}, {  49,   43,   51,   61,   65,   54,   28,    8}, { -48,  -38,   -6,  -18,    0,  -31,  -17,  -63}, { -93,  -63,  -38,  -21,  -81,    0,    0,    0},  
        { 183,  161,  123,   78,   30,  -37, -101, -169}, { -38,    9,    0,  -38,  -72, -142, -203, -288}, {-267, -281, -348, -436, -579,    0,    0,    0}, { 309,  184,  103,   15,  -57, -112, -221, -292}, {-279,  -62, -101,   63,  331,    0,    0,    0},  
        {  65,   -1,  -75, -193, -583,    0,    0,    0}, {  62,   76,   90,   91,   87,   90,   83,   46}, { 106,   79,   71,   68,   72,   75,   86,   89}, {  33,   -3,   -7,  -16,  -27,  -17,   -8,   28}, {  67,   64,   82,  102,  146,    0,    0,    0},  
        { 417,  382,  300,  236,  181,  142,  129,  114}, { 162,  136,   56,  -17,  -77, -116, -144, -143}, { -97, -194, -277, -329, -330,    0,    0,    0}, { 338,  284,  202,   85,   26,  -51, -144, -234}, {-341,  -83,   69,   32,  255,    0,    0,    0}   
    },
    {
        { -12,   43,   73,   86,   18,    0,    0,    0}, {  -8,   -5,    6,   36,   74,  144,  246,  333}, { 123,  115,  117,  116,  125,  108,   95,   80}, {  -8,  -23,    1,   -1,   15,  -18,  -12,  -52}, { -65,  -35,   -3,   17,  -33,    0,    0,    0},  
        { 136,  107,   77,   36,  -10,  -73, -140, -219}, {-109,  -60,  -48,  -65,  -92, -140, -192, -290}, {-202, -221, -284, -369, -514,    0,    0,    0}, { 221,  187,  115,   25,  -13, -114, -175, -270}, {-296,  -57,  -47, -122,  124,    0,    0,    0},  
        {  51,   -8,  -75, -190, -439,    0,    0,    0}, {  -1,   21,   29,   31,   39,   23,   27,   17}, {  99,   94,   78,   68,   74,   69,   71,   87}, {  68,   48,   39,   26,   16,   31,   32,   37}, {  16,   21,   25,   41,   50,    0,    0,    0},  
        { 351,  302,  232,  176,  126,   92,   75,   72}, {  99,   83,   12,  -47,  -93, -120, -139, -127}, { -66, -168, -246, -295, -297,    0,    0,    0}, { 415,  328,  223,  147,   41,    0,  -91, -165}, {-187,   51,  -34,  -25,  211,    0,    0,    0}   
    },
    {
        { -33,   33,   68,   93,   52,    0,    0,    0}, { -44,  -46,  -38,   -3,   34,   98,  161,  247}, {   2,   16,   26,   30,   40,   28,   24,   10}, {  20,   33,   66,   49,   80,   46,   46,   -2}, {  -9,   24,   49,   67,  -20,    0,    0,    0},  
        { 136,  132,   99,   57,   12,  -45, -104, -183}, { -40,   16,   20,    8,  -12,  -70, -118, -202}, {-163, -166, -224, -297, -419,    0,    0,    0}, { 205,  138,   76,    7,  -70, -164, -240, -313}, {-322,  -22,  -25,  -16,  247,    0,    0,    0},  
        {  38,  -21,  -90, -191, -470,    0,    0,    0}, { -48,  -34,  -20,  -20,  -21,  -29,  -33,  -52}, {  53,   42,   27,   23,   29,   27,   37,   58}, {  31,   -6,   -9,  -19,  -23,   -7,   -4,   19}, { -25,  -28,  -18,   -4,   26,    0,    0,    0},  
        { 355,  321,  249,  181,  131,   97,   74,   70}, { 108,  106,   36,  -21,  -79, -104, -117, -105}, { -56, -133, -205, -250, -246,    0,    0,    0}, { 397,  310,  224,  128,   35,  -45, -119, -189}, {-249,   -4,  -13,  -16,  295,    0,    0,    0}   
    },
    {
        { -53,   29,   66,   81,   70,    0,    0,    0}, { -38,  -45,  -32,   -4,   43,  100,  169,  234}, {  -5,   -5,    3,    8,   24,   22,   15,    7}, { -55,  -58,  -27,  -39,   -9,  -37,  -34,  -89}, { -84,  -51,  -27,   -8,  -45,    0,    0,    0},  
        { 156,  152,  131,   95,   52,    0,  -62, -144}, {  -4,   47,   53,   43,   25,  -29,  -83, -174}, {-120, -135, -187, -263, -383,    0,    0,    0}, { 268,  171,   99,   35,  -34, -121, -193, -298}, {-277,  -51,  -56,   -6,  264,    0,    0,    0},  
        {  31,  -22,  -89, -191, -543,    0,    0,    0}, {  -1,    8,   23,   22,   19,   14,   11,  -15}, { -37,  -48,  -53,  -49,  -45,  -33,  -25,  -21}, {  30,    3,   -6,  -12,  -20,   -2,    4,   18}, {   8,    3,    9,   23,   35,    0,    0,    0},  
        { 363,  343,  261,  201,  157,  119,  103,  112}, { 161,  147,   58,    0,  -50,  -73,  -87,  -76}, { -21,  -98, -173, -222, -233,    0,    0,    0}, { 382,  311,  194,  108,   13,  -57, -130, -202}, {-313,  -57,  -17,  -26,  210,    0,    0,    0}   
    },
    {
        { -29,   58,   94,  100,   73,    0,    0,    0}, {  27,    6,   22,   54,   96,  151,  235,  224}, {  38,   11,   25,   30,   46,   40,   37,   28}, { -34,  -46,    1,  -14,   20,   -8,   -9,  -54}, { -67,  -38,  -13,    6,  -85,    0,    0,    0},  
        { 149,  135,  105,   74,   22,  -28,  -87, -166}, { -58,    7,   16,   -3,  -22,  -74, -121, -222}, {-167, -168, -218, -285, -411,    0,    0,    0}, { 222,  128,   91,    8,  -44, -131, -219, -332}, {-336,  -36,  -31,  -20,  237,    0,    0,    0},  
        {  31,  -26,  -87, -207, -454,    0,    0,    0}, { -67,  -53,  -49,  -49,  -44,  -51,  -58, -103}, {   7,  -10,   -7,   -5,    1,    4,   10,    9}, {  28,    3,   -9,  -18,  -21,   -3,    5,   15}, {   8,    1,    4,   13,   26,    0,    0,    0},  
        { 390,  354,  279,  216,  158,  121,  107,  101}, { 165,  134,   50,  -15,  -59,  -97, -113,  -97}, { -38, -130, -191, -241, -252,    0,    0,    0}, { 419,  341,  213,  108,   17,  -44, -131, -182}, {-269,  -37,  -39,  -39,  271,    0,    0,    0}   
    },
    {
        { -50,   25,   58,   78,  -24,    0,    0,    0}, {  43,   12,   23,   54,   92,  162,  192,  214}, {  64,   23,   33,   37,   49,   37,   40,   42}, { -26,  -53,  -13,  -18,   15,  -18,  -20,  -71}, { -81,  -40,  -10,    6,  -89,    0,    0,    0},  
        { 109,  108,   98,   66,   20,  -35,  -97, -193}, {-110,   19,   45,   22,   -3,  -58, -104, -207}, {-171, -168, -224, -301, -417,    0,    0,    0}, { 248,  151,   91,   -1,  -64, -157, -258, -372}, {-331,  -37,  -67,  -53,  237,    0,    0,    0},  
        {  79,   21,  -51, -181, -429,    0,    0,    0}, {   6,   26,   37,   37,   31,    9,  -12,  -39}, {  62,   52,   37,   36,   34,   28,   16,   12}, {  61,   39,   20,   14,    7,   31,   37,   44}, { -24,  -35,  -32,  -17,   -5,    0,    0,    0},  
        { 364,  284,  204,  137,   86,   52,   38,   64}, { 110,   73,   -9,  -77, -128, -172, -186, -160}, { -33, -109, -197, -253, -251,    0,    0,    0}, { 446,  370,  260,  135,   39,  -43, -144, -204}, {-294,  -26,  -24,  -62,  239,    0,    0,    0}   
    },
    {
        { -73,   27,   76,   81,   51,    0,    0,    0}, {  -3,  -37,  -18,   32,   81,  136,  195,  244}, {  86,    9,   24,   35,   51,   49,   49,   34}, { -57,  -65,  -24,  -34,    5,  -25,  -26,  -71}, { -55,  -15,   17,   36,  -28,    0,    0,    0},  
        {  59,   76,   62,   32,    0,  -61, -125, -221}, {-109,   69,   85,   70,   54,   10,  -42, -133}, {-110, -128, -184, -248, -373,    0,    0,    0}, { 225,  148,   84,   31,  -42, -143, -210, -311}, {-278,  -68,  -29,  -28,  229,    0,    0,    0},  
        {  35,  -19,  -93, -215, -518,    0,    0,    0}, { -38,  -27,  -12,   -8,    2,  -28,  -32,  -32}, {  -8,  -11,  -23,  -16,   -8,   -2,  -13,  -68}, { -20,  -50,  -61,  -68,  -69,  -55,  -45,  -43}, {  -4,  -17,  -11,   -6,    0,    0,    0,    0},  
        { 323,  275,  198,  127,   74,   38,   32,   37}, { 105,   76,    1,  -70, -112, -149, -163, -143}, {  49,  -42, -112, -176, -208,    0,    0,    0}, { 417,  324,  217,  122,   14,  -71, -139, -203}, {-254,  -13,  -29,   -1,  222,    0,    0,    0}   
    },
    {
        { -71,   26,   61,   74,   73,    0,    0,    0}, {  -9,  -59,  -42,    8,   48,  101,  161,  136}, {  49,  -17,  -10,    0,   17,   16,   12,   19}, { -30,  -62,    2,   -1,   42,   13,   12,  -19}, { -51,  -15,   20,   41,  -50,    0,    0,    0},  
        {  -7,   41,   30,   12,  -22,  -70, -131, -220}, {-181,   40,   62,   43,   31,  -15,  -66, -154}, {-111,  -96, -136, -197, -332,    0,    0,    0}, { 306,  223,  136,   71,    5,  -82, -174, -237}, {-288,  -57,   -5,  -57,  312,    0,    0,    0},  
        {  62,    1,  -77, -176, -429,    0,    0,    0}, { -98,  -83,  -79,  -69,  -64,  -87,  -61, -489}, {  14,    5,   -5,  -11,   -8,   -6,  -15,  -73}, {  45,   22,   13,    0,   -2,   12,   26,   43}, { -28,  -38,  -33,  -30,  -25,    0,    0,    0},  
        { 288,  217,  140,   80,   27,   -6,  -14,   -3}, { 113,   68,    0,  -64, -116, -150, -170, -157}, {  75,  -16,  -88, -139, -143,    0,    0,    0}, { 438,  292,  216,   97,    1,  -78, -155, -253}, {-336,   -1,  -68,  -25,  220,    0,    0,    0}   
    },
    {
        { -74,   14,   67,   63,   61,    0,    0,    0}, { -41,  -89,  -59,    5,   53,  115,  164,  174}, {  79,  -37,  -28,   -9,    7,   -2,  -12,  -20}, { -82,  -91,  -10,  -26,   21,  -14,  -15,  -73}, { -59,   -9,   22,   36,  -32,    0,    0,    0},  
        {  40,   93,   80,   54,   29,  -30, -101, -200}, {-230,   31,   56,   44,   36,  -10,  -47, -146}, {-104,  -95, -137, -202, -332,    0,    0,    0}, { 215,  186,  102,   38,  -15,  -97, -168, -261}, {-212, -106,  -53,   23,  191,    0,    0,    0},  
        {  51,  -24, -107, -204, -470,    0,    0,    0}, { -43,  -36,  -27,  -11,   -9,  -24,  -28, -587}, {  -4,  -29,  -42,  -54,  -50,  -47,  -78, -188}, { -23,  -53,  -73,  -91,  -91,  -75,  -61,  -37}, {  40,   18,   21,   29,   26,    0,    0,    0},  
        { 329,  239,  168,   94,   42,    3,  -10,   -4}, { 116,   69,   -2,  -63, -111, -140, -169, -142}, { 129,   37,  -42,  -98, -114,    0,    0,    0}, { 360,  290,  190,   89,   -2,  -75, -160, -248}, {-268, -135,  -72,  -25,   88,    0,    0,    0}   
    },
    {
        { -68,    7,   63,   73,   47,    0,    0,    0}, {  72,  -61,  -15,   52,   98,  157,  192,  265}, {  43,  -58,  -52,  -31,  -13,  -12,  -33,  -42}, { -72,  -87,   -5,  -19,   31,  -14,  -17,  -68}, { -82,  -40,   -4,   -1,  -55,    0,    0,    0},  
        {-136,   22,   16,   -7,  -29,  -84, -150, -249}, {-216,   20,   52,   35,   25,  -15,  -64, -160}, {-133, -106, -152, -203, -341,    0,    0,    0}, {  57,  135,   77,    9,  -33, -122, -189, -302}, {-265,  -81,  -40,   21,   57,    0,    0,    0},  
        {  63,  -15, -114, -206, -486,    0,    0,    0}, {  10,   -6,    3,   13,   16,  -30,  -18, -652}, {  14,   -4,  -25,  -36,  -32,  -29,  -56, -144}, {  37,   -2,  -15,  -38,  -39,  -24,  -18,   13}, {  18,   -7,  -10,   -5,   -9,    0,    0,    0},  
        { 275,  202,  123,   61,    8,  -35,  -47,  -23}, { 190,  133,   59,  -13,  -63, -104, -130, -112}, { 130,   27,  -45, -110, -109,    0,    0,    0}, { 380,  313,  190,   89,   -8,  -75, -156, -224}, {-138, -141,  -99,  -67,  128,    0,    0,    0}   
    },
    {
        { -66,  -22,   23,   33,   18,    0,    0,    0}, {   5,  -64,  -24,   48,  103,  154,  178,  169}, { 113,  -66,  -52,  -21,  -10,  -23,  -38,  -55}, { -93, -112,  -13,  -44,   19,  -25,  -35,  -80}, { -85,  -23,   23,   18,    0,    0,    0,    0},  
        {-253,   -1,    4,  -13,  -37,  -99, -160, -250}, {-282,   25,   51,   39,   30,  -19,  -55, -151}, {-122,  -89, -134, -194, -332,    0,    0,    0}, { 135,  151,   88,   34,  -41, -109, -176, -223}, {-224,  -63,  -79,  -68,  126,    0,    0,    0},  
        {  33,  -62, -157, -227, -445,    0,    0,    0}, { -23,  -30,  -30,  -12,  -23,  -65, -112, -456}, {  -7,  -45,  -67,  -82,  -78,  -60,  -84, -197}, {  70,   41,   19,  -12,  -21,   -6,  -24,   -1}, {  31,    3,   -8,   -1,    6,    0,    0,    0},  
        { 226,  154,   76,    6,  -50,  -89, -106,  -78}, { 237,  172,  104,   26,  -24,  -71,  -96,  -86}, { 160,   56,  -27,  -87,  -97,    0,    0,    0}, { 389,  264,  205,   95,    7,  -92, -170, -255}, {-185,  -24,  -37,  -60,  110,    0,    0,    0}   
    },
    {
        { -53,  -18,   33,   43,   19,    0,    0,    0}, {  22,  -58,  -61,   26,   81,  120,  160,  228}, {  86,  -71, -102,  -84,  -54,  -63,  -84, -103}, {-132, -125,  -13,  -37,   25,  -28,  -32,  -76}, { -89,  -19,   19,   27,    2,    0,    0,    0},  
        {-240,  -37,  -26,  -26,  -49, -103, -174, -253}, {-323,   18,   43,   27,   29,  -17,  -50, -155}, {-119,  -27,  -77, -133, -247,    0,    0,    0}, {  15,  182,   92,   22,  -32,  -97, -161, -226}, {-197,  -78,  -63,  -55,   57,    0,    0,    0},  
        {  64,  -69, -188, -195, -429,    0,    0,    0}, { -20,  -41,  -49,  -34,  -57, -121, -110, -522}, {  11,  -26,  -45,  -51,  -42,  -43,  -99, -184}, {  53,   15,    4,  -28,  -39,  -21,  -36, -124}, {  -3,  -27,  -34,  -30,  -45,    0,    0,    0},  
        { 253,  173,   92,   14,  -41,  -75,  -90,  -66}, { 254,  190,  109,   42,  -13,  -55,  -88,  -94}, { 127,   36,  -40, -108,  -66,    0,    0,    0}, { 336,  259,  171,   73,  -13, -101, -201, -299}, {-111,  -32,  -47,  -39,   95,    0,    0,    0}   
    },
    {
        { -44,  -20,   32,   36,   28,    0,    0,    0}, {  12,  -60,  -78,    0,   70,  121,  162,  153}, {  85,  -59,  -91,  -62,  -42,  -52,  -72,  -82}, {-111,  -99,  -33,  -58,   14,  -35,  -49, -101}, {-100,  -36,   -1,   -8,  -71,    0,    0,    0},  
        {-208,  -41,  -41,  -34,  -45,  -97, -168, -259}, {-417,   25,   47,   28,   34,   -7,  -42, -133}, {-104,  -48,  -93, -151, -259,    0,    0,    0}, { -45,   93,   36,  -13,  -61, -125, -168, -219}, {-205,  -28,  -43,  -29,   48,    0,    0,    0},  
        {  97,  -68, -168, -163, -583,    0,    0,    0}, { -10,  -44,  -42,  -31,  -61, -123, -105, -652}, {  28,  -15,  -30,  -42,  -48,  -44,  -95, -184}, {  10,  -44,  -53,  -86,  -96,  -62,  -66, -122}, {   6,  -28,  -44,  -41,  -50,    0,    0,    0},  
        { 238,  188,  103,   25,  -29,  -66,  -86,  -63}, { 232,  178,   99,   32,  -22,  -75, -113, -142}, { 149,   65,  -20,  -88,  -79,    0,    0,    0}, { 309,  227,  159,   71,  -10, -101, -175, -251}, { -65,  -26,  -31,  -58,  136,    0,    0,    0}   
    },
    {
        { -38,  -29,   32,   30,   72,    0,    0,    0}, {  -4,  -55,  -85,   -5,   52,   96,  112,  114}, { 101,  -61,  -94,  -94,  -69,  -77, -100, -107}, {-154,  -95,  -40,  -69,   15,  -32,  -31,  -83}, {-107,  -33,   -1,   -3,  -97,    0,    0,    0},  
        {-248,  -87,  -56,  -34,  -35,  -82, -148, -228}, {-376,   -5,   49,   42,   53,    0,  -31, -126}, { -98,  -17,  -58, -106, -200,    0,    0,    0}, { -64,  133,   63,   14,  -23,  -92, -139, -196}, {-190,  -62,  -72,  -15,  -27,    0,    0,    0},  
        { 110,  -93, -204, -145, -688,    0,    0,    0}, {  22,  -36,  -43,  -29,  -70, -111, -201, -554}, {  17,  -17,  -31,  -47,  -74,  -58,  -89, -168}, {  16,  -17,  -27,  -70,  -69,  -46,  -67, -106}, {  23,  -15,  -33,  -39,  -51,    0,    0,    0},  
        { 225,  143,   55,  -25,  -73, -106, -114,  -94}, { 236,  160,   84,    3,  -62, -115, -161, -127}, { 110,   33,  -44, -119, -103,    0,    0,    0}, { 310,  230,  153,   69,  -24, -108, -184, -276}, { -23,  -67,  -37,  -58,   90,    0,    0,    0}   
    }
};

constexpr uint64_t cell_weight_mask[10] = {
    0x8100000000000081ULL, 0x4281000000008142ULL, 0x2400810000810024ULL, 0x1800008181000018ULL, 0x0042000000004200ULL, 
	0x0024420000422400ULL, 0x0018004242001800ULL, 0x0000240000240000ULL, 0x0000182424180000ULL, 0x0000001818000000ULL
};

int nega_alpha_eval1(Search *search, int alpha, int beta, bool skipped, const bool *searching);
#if MID_FAST_DEPTH > 1
    int nega_alpha(Search *search, int alpha, int beta, int depth, bool skipped, const bool *searching);
#endif
int nega_scout(Search *search, int alpha, int beta, int depth, bool skipped, uint64_t legal, bool is_end_search, const bool *searching);

/*
    @brief Calculate openness

    Not used for now

    @param board                board
    @param flip                 flip information
    @return openness
*/
/*
inline int calc_openness(const Board *board, const Flip *flip){
    uint64_t f = flip->flip;
    uint64_t around = 0ULL;
    for (uint_fast8_t cell = first_bit(&f); f; cell = next_bit(&f))
        around |= bit_around[cell];
    around &= ~flip->flip;
    return pop_count_ull(~(board->player | board->opponent | (1ULL << flip->pos)) & around);
}
*/

/*
    @brief Get number of corner mobility

    Optimized for corner mobility

    @param legal                legal moves as a bitboard
    @return number of legal moves on corners
*/
inline int get_corner_mobility(uint64_t legal){
    int res = (int)((legal & 0b10000001ULL) + ((legal >> 56) & 0b10000001ULL));
    return (res & 0b11) + (res >> 7);
}

/*
    @brief Get a weighted mobility

    @param legal                legal moves as a bitboard
    @return weighted mobility
*/
inline int get_weighted_n_moves(uint64_t legal){
    return pop_count_ull(legal) * 2 + get_corner_mobility(legal);
}

/*
    @brief Get potential mobility

    Same idea as surround in evaluation function

    @param opponent             a bitboard representing opponent
    @param empties              a bitboard representing empty squares
    @return potential mobility
*/
#if USE_SIMD
    inline int get_potential_mobility(uint64_t opponent, uint64_t empties){
        const u64_4 shift(1, HW, HW_M1, HW_P1);
        const u64_4 mask(0x7E7E7E7E7E7E7E7EULL, 0x00FFFFFFFFFFFF00ULL, 0x007E7E7E7E7E7E00ULL, 0x007E7E7E7E7E7E00ULL);
        u64_4 op(opponent);
        op = op & mask;
        return pop_count_ull(empties & all_or((op << shift) | (op >> shift)));
    }
#else
    inline int get_potential_mobility(uint64_t opponent, uint64_t empties){
        uint64_t hmask = opponent & 0x7E7E7E7E7E7E7E7EULL;
        uint64_t vmask = opponent & 0x00FFFFFFFFFFFF00ULL;
        uint64_t hvmask = opponent & 0x007E7E7E7E7E7E00ULL;
        uint64_t res = 
            (hmask << 1) | (hmask >> 1) | 
            (vmask << HW) | (vmask >> HW) | 
            (hvmask << HW_M1) | (hvmask >> HW_M1) | 
            (hvmask << HW_P1) | (hvmask >> HW_P1);
        return pop_count_ull(empties & res);
    }
#endif

/*
    @brief Evaluate a move in midgame

    @param search               search information
    @param flip_value           flip with value
    @param alpha                alpha value to search
    @param beta                 beta value to search
    @param depth                depth to search
    @param searching            flag for terminating this search
    @return true if wipeout found else false
*/
inline bool move_evaluate(Search *search, Flip_value *flip_value, int alpha, int beta, int depth, const bool *searching){
    if (flip_value->flip.flip == search->board.opponent){
        flip_value->value = W_WIPEOUT;
        return true;
    }
    flip_value->value = cell_weight[flip_value->flip.pos] * W_CELL_WEIGHT;
    eval_move(search, &flip_value->flip);
    search->move(&flip_value->flip);
        flip_value->n_legal = search->board.get_legal();
        flip_value->value += get_weighted_n_moves(flip_value->n_legal) * W_MOBILITY;
        uint64_t empties = ~(search->board.player | search->board.opponent);
        flip_value->value += get_potential_mobility(search->board.player, empties) * W_POTENTIAL_MOBILITY;
        switch (depth){
            case 0:
                flip_value->value += mid_evaluate_diff(search) * W_VALUE;
                break;
            case 1:
                flip_value->value += nega_alpha_eval1(search, alpha, beta, false, searching) * (W_VALUE + W_VALUE_DEEP_ADDITIONAL);
                break;
            default:
                #if MID_FAST_DEPTH > 1
                    if (depth <= MID_FAST_DEPTH)
                        flip_value->value += nega_alpha(search, alpha, beta, depth, false, searching) * (W_VALUE + depth * W_VALUE_DEEP_ADDITIONAL);
                    else{
                        uint_fast8_t mpc_level = search->mpc_level;
                        search->mpc_level = MOVE_ORDERING_MPC_LEVEL;
                        flip_value->value += nega_scout(search, alpha, beta, depth, false, flip_value->n_legal, false, searching) * (W_VALUE + depth * W_VALUE_DEEP_ADDITIONAL);
                        search->mpc_level = mpc_level;
                    }
                #else
                    uint_fast8_t mpc_level = search->mpc_level;
                    search->mpc_level = MOVE_ORDERING_MPC_LEVEL;
                    flip_value->value += nega_scout(search, alpha, beta, depth, false, flip_value->n_legal, false, searching) * (W_VALUE + depth * W_VALUE_DEEP_ADDITIONAL);
                    search->mpc_level = mpc_level;
                #endif
                break;
        }
    search->undo(&flip_value->flip);
    eval_undo(search, &flip_value->flip);
    return false;
}

/*
    @brief Evaluate a move in endgame

    @param search               search information
    @param flip_value           flip with value
    @return true if wipeout found else false
*/
inline bool move_evaluate_end(Search *search, Flip_value *flip_value){
    if (flip_value->flip.flip == search->board.opponent){
        flip_value->value = W_WIPEOUT;
        return true;
    }
    flip_value->value = cell_weight[flip_value->flip.pos];
    if (search->parity & cell_div4[flip_value->flip.pos])
        flip_value->value += W_END_PARITY;
    //eval_move(search, &flip_value->flip);
    search->move(&flip_value->flip);
        flip_value->n_legal = search->board.get_legal();
        flip_value->value -= pop_count_ull(flip_value->n_legal) * W_END_MOBILITY;
        //flip_value->value -= mid_evaluate_diff(search) * W_END_VALUE;
    search->undo(&flip_value->flip);
    //eval_undo(search, &flip_value->flip);
    /*
    flip_value->value = cell_weight[flip_value->flip.pos];
    if (search->parity & cell_div4[flip_value->flip.pos])
        flip_value->value += W_END_PARITY;
    search->move(&flip_value->flip);
        flip_value->n_legal = search->board.get_legal();
        flip_value->value -= pop_count_ull(flip_value->n_legal) * W_END_MOBILITY;
    search->undo(&flip_value->flip);
    */
    return false;
}

inline int move_evaluate_end_nws_calc_cell_weight(Board *board, int alpha){
    if (alpha == -HW2)
        return MOVE_ORDERING_CELL_SCORE_MAX;
    else if (alpha == HW2)
        return -MOVE_ORDERING_CELL_SCORE_MAX;
    int res = 0;
    const int alpha_idx = (alpha + HW2 - 2) / 2;
    for (int i = 0; i < N_CELL_TYPES; ++i){
        res += move_ordering_end_disc_weights[alpha_idx][i][pop_count_ull(board->player & cell_weight_mask[i])];
        res += move_ordering_end_disc_weights[alpha_idx][i + N_CELL_TYPES][pop_count_ull(board->opponent & cell_weight_mask[i])];
    }
    /*
    if (res > MOVE_ORDERING_CELL_SCORE_MAX)
        res = MOVE_ORDERING_CELL_SCORE_MAX;
    else if (res < -MOVE_ORDERING_CELL_SCORE_MAX)
        res = -MOVE_ORDERING_CELL_SCORE_MAX;
    */
    return res;
}

/*
    @brief Evaluate a move in endgame

    @param search               search information
    @param flip_value           flip with value
    @return true if wipeout found else false
*/
inline bool move_evaluate_end_nws(Search *search, Flip_value *flip_value, int alpha){
    if (flip_value->flip.flip == search->board.opponent){
        flip_value->value = W_WIPEOUT;
        return true;
    }
    flip_value->value = 0; //cell_weight[flip_value->flip.pos];
    //if (search->parity & cell_div4[flip_value->flip.pos])
    //    flip_value->value += W_END_PARITY;
    search->move(&flip_value->flip);
        flip_value->n_legal = search->board.get_legal();
        flip_value->value -= pop_count_ull(flip_value->n_legal) * W_END_MOBILITY;
        flip_value->value -= move_evaluate_end_nws_calc_cell_weight(&search->board, -alpha - 1);
    search->undo(&flip_value->flip);
    /*
    flip_value->value = cell_weight[flip_value->flip.pos];
    if (search->parity & cell_div4[flip_value->flip.pos])
        flip_value->value += W_END_PARITY;
    search->move(&flip_value->flip);
        flip_value->n_legal = search->board.get_legal();
        flip_value->value -= pop_count_ull(flip_value->n_legal) * W_END_MOBILITY;
    search->undo(&flip_value->flip);
    */
    return false;
}

/*
    @brief Evaluate a move in midgame for NWS

    @param search               search information
    @param flip_value           flip with value
    @param alpha                alpha value to search
    @param beta                 beta value to search
    @param depth                depth to search
    @param searching            flag for terminating this search
    @return true if wipeout found else false
*/
inline bool move_evaluate_nws(Search *search, Flip_value *flip_value, int alpha, int beta, int depth, const bool *searching){
    if (flip_value->flip.flip == search->board.opponent){
        flip_value->value = W_WIPEOUT;
        return true;
    }
    flip_value->value = cell_weight[flip_value->flip.pos];
    //flip_value->value -= pop_count_ull(flip_value->flip.flip) * W_NWS_N_FLIP;
    eval_move(search, &flip_value->flip);
    search->move(&flip_value->flip);
        flip_value->n_legal = search->board.get_legal();
        flip_value->value += get_weighted_n_moves(flip_value->n_legal) * W_NWS_MOBILITY;
        uint64_t empties = ~(search->board.player | search->board.opponent);
        flip_value->value += get_potential_mobility(search->board.player, empties) * W_NWS_POTENTIAL_MOBILITY;
        //int64_t bef_n_nodes = search->n_nodes;
        if (depth == 0)
            flip_value->value += mid_evaluate_diff(search) * W_NWS_VALUE_SHALLOW;
        else
            flip_value->value += nega_alpha_eval1(search, alpha, beta, false, searching) * W_NWS_VALUE;
    search->undo(&flip_value->flip);
    eval_undo(search, &flip_value->flip);
    return false;
}

/*
    @brief Set the best move to the first element

    @param move_list            list of moves
    @param strt                 the first index
    @param siz                  the size of move_list
*/
inline void swap_next_best_move(std::vector<Flip_value> &move_list, const int strt, const int siz){
    if (strt == siz - 1)
        return;
    int top_idx = strt;
    int best_value = move_list[strt].value;
    for (int i = strt + 1; i < siz; ++i){
        if (best_value < move_list[i].value){
            best_value = move_list[i].value;
            top_idx = i;
        }
    }
    if (top_idx != strt)
        std::swap(move_list[strt], move_list[top_idx]);
}

/*
    @brief Set the best move to the first element

    @param move_list            list of moves
    @param strt                 the first index
    @param siz                  the size of move_list
*/
inline void swap_next_best_move(Flip_value move_list[], const int strt, const int siz){
    if (strt == siz - 1)
        return;
    int top_idx = strt;
    int best_value = move_list[strt].value;
    for (int i = strt + 1; i < siz; ++i){
        if (best_value < move_list[i].value){
            best_value = move_list[i].value;
            top_idx = i;
        }
    }
    if (top_idx != strt)
        std::swap(move_list[strt], move_list[top_idx]);
}

/*
    @brief Evaluate all legal moves for midgame

    @param search               search information
    @param move_list            list of moves
    @param depth                remaining depth
    @param alpha                alpha value
    @param beta                 beta value
    @param searching            flag for terminating this search
*/
inline void move_list_evaluate(Search *search, std::vector<Flip_value> &move_list, int depth, int alpha, int beta, const bool *searching){
    if (move_list.size() == 1)
        return;
    int eval_alpha = -std::min(SCORE_MAX, beta + MOVE_ORDERING_VALUE_OFFSET_BETA);
    int eval_beta = -std::max(-SCORE_MAX, alpha - MOVE_ORDERING_VALUE_OFFSET_ALPHA);
    //int phase = get_move_ordering_phase(search->n_discs);
    int eval_depth = depth >> 3;
    if (depth >= 16)
        eval_depth += (depth - 14) >> 1;
    bool wipeout_found = false;
    for (Flip_value &flip_value: move_list){
        if (!wipeout_found)
            wipeout_found = move_evaluate(search, &flip_value, eval_alpha, eval_beta, eval_depth, searching);
        else
            flip_value.value = -INF;
    }
}

/*
    @brief Evaluate all legal moves for endgame

    @param search               search information
    @param move_list            list of moves
*/
inline void move_list_evaluate_end(Search *search, std::vector<Flip_value> &move_list, const int canput){
    if (canput == 1)
        return;
    bool wipeout_found = false;
    for (Flip_value &flip_value: move_list){
        if (!wipeout_found)
            wipeout_found = move_evaluate_end(search, &flip_value);
        else
            flip_value.value = -INF;
    }
}

/*
    @brief Evaluate all legal moves for endgame

    @param search               search information
    @param move_list            list of moves
*/
inline void move_list_evaluate_end_nws(Search *search, std::vector<Flip_value> &move_list, const int canput, int alpha){
    if (canput == 1)
        return;
    bool wipeout_found = false;
    for (Flip_value &flip_value: move_list){
        if (!wipeout_found)
            wipeout_found = move_evaluate_end_nws(search, &flip_value, alpha);
        else
            flip_value.value = -INF;
    }
}

/*
    @brief Evaluate all legal moves for midgame NWS

    @param search               search information
    @param move_list            list of moves
    @param depth                remaining depth
    @param alpha                alpha value (beta = alpha + 1)
    @param searching            flag for terminating this search
*/
inline void move_list_evaluate_nws(Search *search, std::vector<Flip_value> &move_list, int depth, int alpha, const bool *searching){
    if (move_list.size() == 1)
        return;
    const int eval_alpha = -std::min(SCORE_MAX, alpha + MOVE_ORDERING_NWS_VALUE_OFFSET_BETA);
    const int eval_beta = -std::max(-SCORE_MAX, alpha - MOVE_ORDERING_NWS_VALUE_OFFSET_ALPHA);
    int eval_depth = depth >> 4;
    bool wipeout_found = false;
    for (Flip_value &flip_value: move_list){
        if (!wipeout_found)
            wipeout_found = move_evaluate_nws(search, &flip_value, eval_alpha, eval_beta, eval_depth, searching);
        else
            flip_value.value = -INF;
    }
}