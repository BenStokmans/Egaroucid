#pragma once
#include <chrono>
#include <random>
#include "setting.hpp"

using namespace std;

#define inf 100000000
#define n_phases 15
#define phase_n_stones 4

#define n_line 6561
#define hw 8
#define hw_m1 7
#define hw_p1 9
#define hw2 64
#define hw22 128
#define hw2_m1 63
#define hw2_mhw 56
#define hw2_p1 65
#define black 0
#define white 1
#define vacant 2

inline long long tim(){
    return chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now().time_since_epoch()).count();
}

mt19937 raw_myrandom(tim());
bool global_searching = true;

inline double myrandom(){
    return (double)raw_myrandom() / mt19937::max();
}

inline int myrandrange(int s, int e){
    return s +(int)((e - s) * myrandom());
}

inline unsigned long long myrand_ull(){
    return (unsigned long long)(myrandom() * 18446744073709551615ULL);
}

/*
inline int pop_count_ull(unsigned long long x){
    unsigned long long a = x & 0b0101010101010101010101010101010101010101010101010101010101010101ULL;
    unsigned long long b = x & 0b1010101010101010101010101010101010101010101010101010101010101010ULL;
    x = a + (b >> 1);
    a = x & 0b0011001100110011001100110011001100110011001100110011001100110011ULL;
    b = x & 0b1100110011001100110011001100110011001100110011001100110011001100ULL;
    x = a + (b >> 2);
    a = x & 0b0000111100001111000011110000111100001111000011110000111100001111ULL;
    b = x & 0b1111000011110000111100001111000011110000111100001111000011110000ULL;
    x = a + (b >> 4);
    a = x & 0b0000000011111111000000001111111100000000111111110000000011111111ULL;
    b = x & 0b1111111100000000111111110000000011111111000000001111111100000000ULL;
    x = a + (b >> 8);
    a = x & 0b0000000000000000111111111111111100000000000000001111111111111111ULL;
    b = x & 0b1111111111111111000000000000000011111111111111110000000000000000ULL;
    x = a + (b >> 16);
    a = x & 0b0000000000000000000000000000000011111111111111111111111111111111ULL;
    b = x & 0b1111111111111111111111111111111100000000000000000000000000000000ULL;
    return (int)(a + (b >> 32));
}
*/

inline int pop_count_ull(unsigned long long x){
    x = x - ((x >> 1) & 0x5555555555555555ULL);
	x = (x & 0x3333333333333333ULL) + ((x >> 2) & 0x3333333333333333ULL);
	x = (x + (x >> 4)) & 0x0F0F0F0F0F0F0F0FULL;
	x = (x * 0x0101010101010101ULL) >> 56;
    return (int)x;
}

inline unsigned long long mirror_v(unsigned long long x){
    unsigned long long a = x & 0b0101010101010101010101010101010101010101010101010101010101010101ULL;
    unsigned long long b = x & 0b1010101010101010101010101010101010101010101010101010101010101010ULL;
    x = (a << 1) | (b >> 1);
    a = x & 0b0011001100110011001100110011001100110011001100110011001100110011ULL;
    b = x & 0b1100110011001100110011001100110011001100110011001100110011001100ULL;
    x = (a << 2) | (b >> 2);
    a = x & 0b0000111100001111000011110000111100001111000011110000111100001111ULL;
    b = x & 0b1111000011110000111100001111000011110000111100001111000011110000ULL;
    x = (a << 4) | (b >> 4);
    a = x & 0b0000000011111111000000001111111100000000111111110000000011111111ULL;
    b = x & 0b1111111100000000111111110000000011111111000000001111111100000000ULL;
    x = (a << 8) | (b >> 8);
    a = x & 0b0000000000000000111111111111111100000000000000001111111111111111ULL;
    b = x & 0b1111111111111111000000000000000011111111111111110000000000000000ULL;
    x = (a << 16) | (b >> 16);
    a = x & 0b0000000000000000000000000000000011111111111111111111111111111111ULL;
    b = x & 0b1111111111111111111111111111111100000000000000000000000000000000ULL;
    return (a << 32) | (b >> 32);
}
/*
#ifdef _MSC_VER
	#define	mirror_v(x)	_byteswap_uint64(x)
#else
	#define	mirror_v(x)	__builtin_bswap64(x)
#endif
*/
inline unsigned long long white_line(unsigned long long x){
    unsigned long long res = 0;
    int i, j;
    for (i = 0; i < hw; ++i){
        for (j = 0; j < hw; ++j){
            res |= (1 & (x >> (i * hw + j))) << (j * hw + i);
        }
    }
    return res;
}

inline unsigned long long black_line(unsigned long long x){
    unsigned long long res = 0;
    int i, j;
    for (i = 0; i < hw; ++i){
        for (j = 0; j < hw; ++j){
            res |= (1 & (x >> (i * hw + j))) << ((hw_m1 - j) * hw + hw_m1 - i);
        }
    }
    return res;
}

inline int join_v_line(unsigned long long x, int c){
    x = (x >> c) & 0b0000000100000001000000010000000100000001000000010000000100000001ULL;
    /*
    unsigned long long a = x & 0b0000000000000001000000000000000100000000000000010000000000000001ULL;
    unsigned long long b = x & 0b0000000100000000000000010000000000000001000000000000000100000000ULL;
    x = a | (b >> 7);
    a = x & 0b0000000000000000000000000000001100000000000000000000000000000011ULL;
    b = x & 0b0000000000000011000000000000000000000000000000110000000000000000ULL;
    x = a | (b >> 14);
    a = x & 0b0000000000000000000000000000000000000000000000000000000000001111ULL;
    b = x & 0b0000000000000000000000000000111100000000000000000000000000000000ULL;
    x = a | (b >> 28);
    return (int)x;
    */
    return (x * 0b0000000100000010000001000000100000010000001000000100000010000000ULL) >> 56;
}

inline unsigned long long split_v_line(unsigned char x, int c){
    unsigned long long res = 0;
    unsigned long long a = x & 0b00001111;
    unsigned long long b = x & 0b11110000;
    res = a | (b << 28);
    a = res & 0b0000000000000000000000000000001100000000000000000000000000000011ULL;
    b = res & 0b0000000000000000000000000000110000000000000000000000000000001100ULL;
    res = a | (b << 14);
    a = res & 0b0000000000000001000000000000000100000000000000010000000000000001ULL;
    b = res & 0b0000000000000010000000000000001000000000000000100000000000000010ULL;
    res = a | (b << 7);
    return res << c;
}

inline int join_d7_line(unsigned long long x, const int t){
    x = (x >> t) & 0b0000000000000010000001000000100000010000001000000100000010000001ULL;
    /*
    x = (x >> t) & 0b1000000100000010000001000000100000010000001000000100000010000001ULL;
    unsigned long long a = x & 0b0000000100000000000001000000000000010000000000000100000000000001ULL;
    unsigned long long b = x & 0b1000000000000010000000000000100000000000001000000000000010000000ULL;
    unsigned long long c;
    x = a | (b >> 6);
    a = x & 0b0000001100000000000000000000000000110000000000000000000000000011ULL;
    b = x & 0b0000000000000000000011000000000000000000000000001100000000000000ULL;
    x = a | (b >> 12);
    a = x & 0b0000000000000000000000000000000000000000000000000000000000001111ULL;
    b = x & 0b0000000000000000000000000000000011110000000000000000000000000000ULL;
    c = x & 0b0000001100000000000000000000000000000000000000000000000000000000ULL;
    x = a | (b >> 24) | (c >> 48);
    return (int)x;
    */
    return (x * 0b1000000010000000100000001000000010000000100000001000000010000000ULL) >> 56;
}

inline unsigned long long split_d7_line(unsigned char x, int t){
    unsigned char c = x & 0b01010101;
    unsigned char d = x & 0b10101010;
    x = (c << 1) | (d >> 1);
    c = x & 0b00110011;
    d = x & 0b11001100;
    x = (c << 2) | (d >> 2);
    c = x & 0b00001111;
    d = x & 0b11110000;
    x = (c << 4) | (d >> 4);
    unsigned long long a = x & 0b00001111;
    unsigned long long b = x & 0b11110000;
    unsigned long long res = a | (b << 24);
    a = res & 0b0000000000000000000000000000000000110000000000000000000000000011ULL;
    b = res & 0b0000000000000000000000000000000011000000000000000000000000001100ULL;
    res = a | (b << 12);
    a = res & 0b0000000100000000000001000000000000010000000000000100000000000001ULL;
    b = res & 0b0000001000000000000010000000000000100000000000001000000000000010ULL;
    res = a | (b << 6);
    return res << t;
}

inline int join_d9_line(unsigned long long x, int t){
    if (t > 0)
        x >>= t;
    else if (t < 0)
        x <<= (-t);
    x &= 0b1000000001000000001000000001000000001000000001000000001000000001ULL;
    /*
    unsigned long long a = x & 0b0000000001000000000000000001000000000000000001000000000000000001ULL;
    unsigned long long b = x & 0b1000000000000000001000000000000000001000000000000000001000000000ULL;
    x = a | (b >> 8);
    a = x & 0b0000000000000000000000000011000000000000000000000000000000000011ULL;
    b = x & 0b0000000011000000000000000000000000000000000011000000000000000000ULL;
    x = a | (b >> 16);
    a = x & 0b0000000000000000000000000000000000000000000000000000000000001111ULL;
    b = x & 0b0000000000000000000000001111000000000000000000000000000000000000ULL;
    x = a | (b >> 32);
    return (int)x;
    */
    return (x * 0b0000000100000001000000010000000100000001000000010000000100000001ULL) >> 56;
}

inline unsigned long long split_d9_line(unsigned char x, int t){
    unsigned long long a = x & 0b00001111;
    unsigned long long b = x & 0b11110000;
    unsigned long long res = a | (b << 32);
    a = res & 0b0000000000000000000000000011000000000000000000000000000000000011ULL;
    b = res & 0b0000000000000000000000001100000000000000000000000000000000001100ULL;
    res = a | (b << 16);
    a = res & 0b0000000001000000000000000001000000000000000001000000000000000001ULL;
    b = res & 0b0000000010000000000000000010000000000000000010000000000000000010ULL;
    res = a | (b << 8);
    if (t > 0)
        return res << t;
    return res >> (-t);
}